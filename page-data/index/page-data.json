{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"9f744310-a7f6-54bd-b312-597dcf8228b6","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"Summer of GraphQL: Auto-generating Typescript for your content model\"), mdx(\"meta\", {\n    property: \"og:title\",\n    content: \"Auto-generating Typescripts\"\n  }), mdx(\"meta\", {\n    property: \"og:description\",\n    content: \"Summer of GraphQL: Auto-generating Typescript for your content model\"\n  }), mdx(\"meta\", {\n    property: \"og:image\",\n    content: myPicSmall\n  }), mdx(\"meta\", {\n    property: \"og:url\",\n    content: \"https://github.com/rachel-church/summer-of-qraphql\"\n  }), mdx(\"link\", {\n    rel: \"icon\",\n    href: favicon\n  })), mdx(\"h1\", {\n    style: {\n      fontSize: \"1.3em\",\n      marginBottom: \"16px\",\n      textAlign: 'center'\n    }\n  }, \"Auto-generating Typescript for your content model\"), mdx(\"p\", {\n    style: {\n      display: \"flex\",\n      alignItems: 'center',\n      marginTop: 0\n    }\n  }, mdx(\"span\", null, \"A workshop by your friends at\"), \"\\xA0\\xA0\", mdx(\"img\", {\n    src: \"https://www.clover.com/static/media/clover-logo.4204a79c.svg\",\n    alt: \"Clover\",\n    style: {\n      height: '1em'\n    }\n  })), mdx(\"small\", {\n    style: {\n      fontSize: \".5em\",\n      color: \"grey\"\n    }\n  }, \"Use the left/right arrow keys to navigate this \", mdx(\"a\", {\n    href: \"https://github.com/jxnblk/mdx-deck\"\n  }, \"mdx-deck\")), mdx(\"hr\", null), mdx(\"div\", {\n    style: {\n      display: 'flex',\n      width: '100%'\n    }\n  }, mdx(\"img\", {\n    src: myPic,\n    alt: \"\",\n    style: {\n      maxHeight: '100vh',\n      maxWidth: '40vw'\n    }\n  }), mdx(\"div\", {\n    style: {\n      paddingLeft: '2em'\n    }\n  }, mdx(\"h1\", null, \"My name is Rachel\"), mdx(\"p\", {\n    style: {\n      fontSize: '2em'\n    }\n  }, \"\\uD83E\\uDDD7\\uD83C\\uDFFC\\u200D\\u2640\\uFE0F\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83C\\uDF73\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83D\\uDCBB\\uD83E\\uDDD8\\uD83C\\uDFFC\\u200D\\u2640\\uFE0F\\uD83D\\uDC08\\uD83D\\uDC83\"), mdx(\"ul\", null, mdx(\"li\", null, \"Twitter: \", mdx(\"a\", {\n    href: \"https://twitter.com/RachelWebDev\"\n  }, \"@RachelWebDev\")), mdx(\"li\", null, \"Github: \", mdx(\"a\", {\n    href: \"https://github.com/rachel-church\"\n  }, \"rachel-church\"))))), mdx(\"hr\", null), mdx(\"h1\", null, \"Today we'll learn how to...\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"codegen\"), \" to generate TS definitions from Contentful\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Utilize TS in conjunction with Apollo\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"codegen\"), \" to improve IDE checking of graphQL\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Want to follow along?\"), mdx(\"p\", null, \"Starter code: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/rachel-church/summer-of-qraphql\"\n  }), \"https://github.com/rachel-church/summer-of-qraphql\")), mdx(\"p\", null, \"Slide deck: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://summer-of-graphql-mdx-slides.netlify.app/\"\n  }), \"https://summer-of-graphql-mdx-slides.netlify.app/\")), mdx(\"hr\", null), mdx(\"h1\", null, \"What is TypeScript?\"), mdx(\"img\", {\n    src: \"https://lh3.googleusercontent.com/Fxmc052uksOtE4K9JsCSoq_5OSDw66TrN9AKT3ML82hJATJfMgiVq1HlEv_lEWcgtN8AWBoqtw=s0\",\n    alt: \"TypeScript is a superset of Javascript\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"Why should you use TypeScript?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Helps to catch bugs and validate code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Static checking and code completion from inside your IDE\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Easier to refactor code without breaking it\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"- types describe the shape of an object - helps validate code - type inference allows you to get a lot of power without writing additional code - providing better documentation\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Let's get to it! \\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83D\\uDCBB\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\".env\\\" subtitle=\\\"Adding Contentful credentials\\\"\",\n    \"title\": \"\\\".env\\\"\",\n    \"subtitle\": \"\\\"Adding\",\n    \"Contentful\": true,\n    \"credentials\\\"\": true\n  }), \"REACT_APP_CONTENTFUL_SPACE_ID=z1e74uympjtv\\nREACT_APP_CONTENTFUL_ENVIRONMENT=master\\nREACT_APP_CONTENTFUL_API_KEY=hOSyAyj25eyBNh3tRBScPJLu40SRSx-EgjWGTdtrA98\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Install TypeScript\\\" subtitle=\\\"Pick either npm or yarn, rename js files, then restart the app\\\"\",\n    \"title\": \"\\\"Install\",\n    \"TypeScript\\\"\": true,\n    \"subtitle\": \"\\\"Pick\",\n    \"either\": true,\n    \"npm\": true,\n    \"or\": true,\n    \"yarn,\": true,\n    \"rename\": true,\n    \"js\": true,\n    \"files,\": true,\n    \"then\": true,\n    \"restart\": true,\n    \"the\": true,\n    \"app\\\"\": true\n  }), \"npm install --save-dev typescript @types/node @types/react @types/react-dom @types/jest\\n\\n# or\\n\\nyarn add -D typescript @types/node @types/react @types/react-dom @types/jest\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"27:32 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step0/App.jsx\\\" subtitle=\\\"We already have TS errors!\\\"\",\n    \"27:32\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step0/App.jsx\\\"\",\n    \"subtitle\": \"\\\"We\",\n    \"already\": true,\n    \"have\": true,\n    \"TS\": true,\n    \"errors!\\\"\": true\n  }), \"import React, { useEffect } from 'react';\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\nconst GET_TOYS_QUERY = `\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\nconst App = () => {\\n  const [{ data, loading, error }, setDogToyState] = React.useState({\\n    data: undefined,\\n    loading: true,\\n    error: undefined,\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = data?.dogToyCollection?.items || [];\\n\\n  // Fetch all dog toys from Contentful on page load\\n  useEffect(() => {\\n    // Set the loading flag to true and clear loading and error flags\\n    setDogToyState({ data: undefined, loading: true, error: undefined });\\n\\n    // Fetch the data from Contentful\\n    fetch(\\n      CONTENTFUL_GRAPHQL_ENDPOINT,\\n      {\\n        method: 'POST',\\n        headers: {\\n          Authorization: `Bearer ${API_KEY}`,\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ query: GET_TOYS_QUERY }),\\n      },\\n    )\\n      .then((res) => res.json())\\n      .then(({ data }) => {\\n        console.log('Received response from Contentful', data);\\n        setDogToyState({ data, loading: false, error: undefined })\\n      })\\n      .catch((err) => setDogToyState({ data: undefined, loading: false, error: err }))\\n  }, []);\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              <img src={toy.toyPhoto.url} alt=\\\"\\\"/>\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"26:52 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step1/App.tsx\\\" subtitle=\\\"Adding a custom type to define the shape of our state\\\"\",\n    \"26:52\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step1/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Adding\",\n    \"a\": true,\n    \"custom\": true,\n    \"type\": true,\n    \"to\": true,\n    \"define\": true,\n    \"the\": true,\n    \"shape\": true,\n    \"of\": true,\n    \"our\": true,\n    \"state\\\"\": true\n  }), \"import React, { useEffect } from 'react';\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\nconst GET_TOYS_QUERY = `\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type representing a single DogToy entry with just the fields we are requesting in our above graphQL query\\n */\\ntype DogToy = {\\n  sys: { id: string };\\n  toyName: string;\\n  estimatedPrice: number;\\n  toyPhoto: { url: string };\\n};\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyCollection = {\\n  dogToyCollection: {\\n    items: DogToy[];\\n  }\\n}\\n\\nconst App = () => {\\n  const [{ data, loading, error }, setDogToyState] = React.useState<\\n    { data?: DogToyCollection; loading?: boolean; error?: unknown } // Inlined type representing the data saved in the state variable\\n  >({\\n    data: undefined,\\n    loading: true,\\n    error: undefined,\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = data?.dogToyCollection?.items || [];\\n\\n  // Fetch all dog toys from Contentful on page load\\n  useEffect(() => {\\n    // Set the loading flag to true and clear loading and error flags\\n    setDogToyState({ data: undefined, loading: true, error: undefined });\\n\\n    // Fetch the data from Contentful\\n    fetch(\\n      CONTENTFUL_GRAPHQL_ENDPOINT,\\n      {\\n        method: 'POST',\\n        headers: {\\n          Authorization: `Bearer ${API_KEY}`,\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ query: GET_TOYS_QUERY }),\\n      },\\n    )\\n      .then((res) => res.json())\\n      .then(({ data }) => {\\n        console.log('Received response from Contentful', data);\\n        setDogToyState({ data, loading: false, error: undefined })\\n      })\\n      .catch((err) => setDogToyState({ data: undefined, loading: false, error: err }))\\n  }, []);\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              <img src={toy.toyPhoto.url} alt=\\\"\\\"/>\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Install graphql-codegen\\\"\",\n    \"title\": \"\\\"Install\",\n    \"graphql-codegen\\\"\": true\n  }), \"npm install --save-dev @graphql-codegen/cli graphql @graphql-codegen/typescript\\n\\n# or\\n\\nyarn add -D @graphql-codegen/cli graphql @graphql-codegen/typescript\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"showNumbers title=\\\"codegen.yml\\\" file=\\\"src/step2/codegen.yml\\\" subtitle=\\\"Configure codegen\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"codegen.yml\\\"\",\n    \"file\": \"\\\"src/step2/codegen.yml\\\"\",\n    \"subtitle\": \"\\\"Configure\",\n    \"codegen\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ngenerates:\\n  src/schema.ts:\\n    plugins:\\n      - typescript\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-json\",\n    \"metastring\": \"3 title=\\\"package.json\\\" subtitle=\\\"Add a script to generate src/schema.ts\\\"\",\n    \"title\": \"\\\"package.json\\\"\",\n    \"subtitle\": \"\\\"Add\",\n    \"a\": true,\n    \"script\": true,\n    \"to\": true,\n    \"generate\": true,\n    \"src/schema.ts\\\"\": true\n  }), \"{\\n  \\\"scripts\\\": {\\n    \\\"gen\\\": \\\"graphql-codegen --config codegen.yml --require dotenv/config\\\",\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\"\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"3:5 title=\\\"package.json\\\" subtitle=\\\"Ensure this step is ran before starting the app\\\"\",\n    \"3:5\": true,\n    \"title\": \"\\\"package.json\\\"\",\n    \"subtitle\": \"\\\"Ensure\",\n    \"this\": true,\n    \"step\": true,\n    \"is\": true,\n    \"ran\": true,\n    \"before\": true,\n    \"starting\": true,\n    \"the\": true,\n    \"app\\\"\": true\n  }), \"{\\n  \\\"scripts\\\": {\\n    \\\"gen\\\": \\\"graphql-codegen --config codegen.yml --require dotenv/config\\\",\\n    \\\"start\\\": \\\"yarn gen && react-scripts start\\\",\\n    \\\"build\\\": \\\"yarn gen && react-scripts build\\\"\\n  }\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Restart the app OR run the script to generate src/schema.ts\\\"\",\n    \"title\": \"\\\"Restart\",\n    \"the\": true,\n    \"app\": true,\n    \"OR\": true,\n    \"run\": true,\n    \"script\": true,\n    \"to\": true,\n    \"generate\": true,\n    \"src/schema.ts\\\"\": true\n  }), \"npm run gen\\n\\n# or\\n\\nyarn gen\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"26:52 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step1/App.tsx\\\" subtitle=\\\"Our current code\\\"\",\n    \"26:52\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step1/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import React, { useEffect } from 'react';\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\nconst GET_TOYS_QUERY = `\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type representing a single DogToy entry with just the fields we are requesting in our above graphQL query\\n */\\ntype DogToy = {\\n  sys: { id: string };\\n  toyName: string;\\n  estimatedPrice: number;\\n  toyPhoto: { url: string };\\n};\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyCollection = {\\n  dogToyCollection: {\\n    items: DogToy[];\\n  }\\n}\\n\\nconst App = () => {\\n  const [{ data, loading, error }, setDogToyState] = React.useState<\\n    { data?: DogToyCollection; loading?: boolean; error?: unknown } // Inlined type representing the data saved in the state variable\\n  >({\\n    data: undefined,\\n    loading: true,\\n    error: undefined,\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = data?.dogToyCollection?.items || [];\\n\\n  // Fetch all dog toys from Contentful on page load\\n  useEffect(() => {\\n    // Set the loading flag to true and clear loading and error flags\\n    setDogToyState({ data: undefined, loading: true, error: undefined });\\n\\n    // Fetch the data from Contentful\\n    fetch(\\n      CONTENTFUL_GRAPHQL_ENDPOINT,\\n      {\\n        method: 'POST',\\n        headers: {\\n          Authorization: `Bearer ${API_KEY}`,\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ query: GET_TOYS_QUERY }),\\n      },\\n    )\\n      .then((res) => res.json())\\n      .then(({ data }) => {\\n        console.log('Received response from Contentful', data);\\n        setDogToyState({ data, loading: false, error: undefined })\\n      })\\n      .catch((err) => setDogToyState({ data: undefined, loading: false, error: err }))\\n  }, []);\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              <img src={toy.toyPhoto.url} alt=\\\"\\\"/>\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"28:42 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step2/App.tsx\\\" subtitle=\\\"Import and use DogToyCollection from schema.ts\\\"\",\n    \"28:42\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step2/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Import\",\n    \"and\": true,\n    \"use\": true,\n    \"DogToyCollection\": true,\n    \"from\": true,\n    \"schema.ts\\\"\": true\n  }), \"import React, { useEffect } from 'react';\\nimport { DogToy, DogToyCollection } from './schema';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\nconst GET_TOYS_QUERY = `\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyResponse = {\\n  dogToyCollection: DogToyCollection\\n}\\n\\nconst App = () => {\\n  const [{ data, loading, error }, setDogToyState] = React.useState<\\n    { data?: DogToyResponse; loading?: boolean; error?: unknown } // Inlined type representing the data saved in the state variable\\n  >({\\n    data: undefined,\\n    loading: true,\\n    error: undefined,\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  // Fetch all dog toys from Contentful on page load\\n  useEffect(() => {\\n    // Set the loading flag to true and clear loading and error flags\\n    setDogToyState({ data: undefined, loading: true, error: undefined });\\n\\n    // Fetch the data from Contentful\\n    fetch(\\n      CONTENTFUL_GRAPHQL_ENDPOINT,\\n      {\\n        method: 'POST',\\n        headers: {\\n          Authorization: `Bearer ${API_KEY}`,\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ query: GET_TOYS_QUERY }),\\n      },\\n    )\\n      .then((res) => res.json())\\n      .then(({ data }) => {\\n        console.log('Received response from Contentful', data);\\n        setDogToyState({ data, loading: false, error: undefined })\\n      })\\n      .catch((err) => setDogToyState({ data: undefined, loading: false, error: err }))\\n  }, []);\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"We were able to remove 10 lines of boilerplate!\"), mdx(\"hr\", null), mdx(\"h3\", null, \"We are still having to manually create types though... \\uD83D\\uDE4D\\uD83C\\uDFFC\\u200D\\u2640\\uFE0F\"), mdx(\"hr\", null), mdx(\"h2\", null, \"What could Apollo Client give us?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Intelligent caching\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Less code - utilize the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.apollographql.com/docs/react/data/queries/#executing-a-query\"\n  }), \"useQuery\"), \" hook\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Parsing of our graphQL queries\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Wait... what exactly is Apollo Client again?\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"- open source state management library - helps fetch, cache, and modify data - could have a whole talk on just Apollo\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Install Apollo Client\\\"\",\n    \"title\": \"\\\"Install\",\n    \"Apollo\": true,\n    \"Client\\\"\": true\n  }), \"npm install --save-dev @apollo/client\\n\\n# or\\n\\nyarn add -D @apollo/client\\n\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"showNumbers title=\\\"src/index.tsx\\\" file=\\\"src/step2/index.tsx\\\" subtitle=\\\"Our current code\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/index.tsx\\\"\",\n    \"file\": \"\\\"src/step2/index.tsx\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\n\\nReactDOM.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>,\\n  document.getElementById('root')\\n);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"showNumbers title=\\\"src/index.tsx\\\" file=\\\"src/step3/index.tsx\\\" subtitle=\\\"Add and configure ApolloProvider\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/index.tsx\\\"\",\n    \"file\": \"\\\"src/step3/index.tsx\\\"\",\n    \"subtitle\": \"\\\"Add\",\n    \"and\": true,\n    \"configure\": true,\n    \"ApolloProvider\\\"\": true\n  }), \"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nexport const apolloClient = new ApolloClient({\\n  uri: `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`,\\n  headers: {\\n    Authorization: `Bearer ${API_KEY}`,\\n  },\\n  cache: new InMemoryCache(),\\n});\\n\\nReactDOM.render(\\n  <React.StrictMode>\\n    <ApolloProvider client={apolloClient}>\\n      <App/>\\n    </ApolloProvider>\\n  </React.StrictMode>,\\n  document.getElementById('root')\\n);\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"35:71 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step2/App.tsx\\\" subtitle=\\\"Our current code\\\"\",\n    \"35:71\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step2/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import React, { useEffect } from 'react';\\nimport { DogToy, DogToyCollection } from './schema';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\nconst GET_TOYS_QUERY = `\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyResponse = {\\n  dogToyCollection: DogToyCollection\\n}\\n\\nconst App = () => {\\n  const [{ data, loading, error }, setDogToyState] = React.useState<\\n    { data?: DogToyResponse; loading?: boolean; error?: unknown } // Inlined type representing the data saved in the state variable\\n  >({\\n    data: undefined,\\n    loading: true,\\n    error: undefined,\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  // Fetch all dog toys from Contentful on page load\\n  useEffect(() => {\\n    // Set the loading flag to true and clear loading and error flags\\n    setDogToyState({ data: undefined, loading: true, error: undefined });\\n\\n    // Fetch the data from Contentful\\n    fetch(\\n      CONTENTFUL_GRAPHQL_ENDPOINT,\\n      {\\n        method: 'POST',\\n        headers: {\\n          Authorization: `Bearer ${API_KEY}`,\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ query: GET_TOYS_QUERY }),\\n      },\\n    )\\n      .then((res) => res.json())\\n      .then(({ data }) => {\\n        console.log('Received response from Contentful', data);\\n        setDogToyState({ data, loading: false, error: undefined })\\n      })\\n      .catch((err) => setDogToyState({ data: undefined, loading: false, error: err }))\\n  }, []);\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"39\": true,\n    \"className\": \"language-tsx\",\n    \"metastring\": \"39 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step3/App.tsx\\\" subtitle=\\\"Utilizing apollo client\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step3/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Utilizing\",\n    \"apollo\": true,\n    \"client\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, DogToyCollection } from './schema';\\nimport { useQuery, gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\nconst GET_TOYS_QUERY = gql`\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyResponse = {\\n  dogToyCollection: DogToyCollection\\n}\\n\\nconst App = () => {\\n  const { loading, error, data } = useQuery<DogToyResponse>(GET_TOYS_QUERY);\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"16:29 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step3/App.tsx\\\" subtitle=\\\"useQuery expects a GraphQL AST\\\"\",\n    \"16:29\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step3/App.tsx\\\"\",\n    \"subtitle\": \"\\\"useQuery\",\n    \"expects\": true,\n    \"a\": true,\n    \"GraphQL\": true,\n    \"AST\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, DogToyCollection } from './schema';\\nimport { useQuery, gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\nconst GET_TOYS_QUERY = gql`\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyResponse = {\\n  dogToyCollection: DogToyCollection\\n}\\n\\nconst App = () => {\\n  const { loading, error, data } = useQuery<DogToyResponse>(GET_TOYS_QUERY);\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"18:39 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step3/App.tsx\\\" subtitle=\\\"What if we want to add a graphql variable?\\\"\",\n    \"18:39\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step3/App.tsx\\\"\",\n    \"subtitle\": \"\\\"What\",\n    \"if\": true,\n    \"we\": true,\n    \"want\": true,\n    \"to\": true,\n    \"add\": true,\n    \"a\": true,\n    \"graphql\": true,\n    \"variable?\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, DogToyCollection } from './schema';\\nimport { useQuery, gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\nconst GET_TOYS_QUERY = gql`\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyResponse = {\\n  dogToyCollection: DogToyCollection\\n}\\n\\nconst App = () => {\\n  const { loading, error, data } = useQuery<DogToyResponse>(GET_TOYS_QUERY);\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"18:47 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step4/App.tsx\\\" subtitle=\\\"Declarative usage of graphql variables\\\"\",\n    \"18:47\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step4/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Declarative\",\n    \"usage\": true,\n    \"of\": true,\n    \"graphql\": true,\n    \"variables\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, DogToyCollection } from './schema';\\nimport { useQuery, gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\nconst GET_TOYS_QUERY = gql`\\n  query ($maxPrice: Float) {\\n    dogToyCollection(where: {estimatedPrice_lt: $maxPrice}) {\\n      items {\\n        sys { id }\\n        toyName\\n        estimatedPrice\\n        toyPhoto { url }\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyResponse = {\\n  dogToyCollection: DogToyCollection\\n}\\n\\ntype DogToyVariables = {\\n  maxPrice: number\\n}\\n\\nconst App = () => {\\n  const { loading, error, data } = useQuery<DogToyResponse, DogToyVariables>(GET_TOYS_QUERY, {\\n    variables: {\\n      maxPrice: 20\\n    }\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"Let's utilize codegen to create the types for us \\uD83C\\uDF89\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Install typescript-operations codegen plugin\\\"\",\n    \"title\": \"\\\"Install\",\n    \"typescript-operations\": true,\n    \"codegen\": true,\n    \"plugin\\\"\": true\n  }), \"npm install --save-dev @graphql-codegen/typescript-operations\\n\\n# or\\n\\nyarn add -D @graphql-codegen/typescript-operations\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"showNumbers title=\\\"codegen.yml\\\" file=\\\"src/step2/codegen.yml\\\" subtitle=\\\"Our current codegen configuration\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"codegen.yml\\\"\",\n    \"file\": \"\\\"src/step2/codegen.yml\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"codegen\": true,\n    \"configuration\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ngenerates:\\n  src/schema.ts:\\n    plugins:\\n      - typescript\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"showNumbers title=\\\"codegen.yml\\\" file=\\\"src/step5/codegen.yml\\\" subtitle=\\\"Add the typescript-operations plugin\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"codegen.yml\\\"\",\n    \"file\": \"\\\"src/step5/codegen.yml\\\"\",\n    \"subtitle\": \"\\\"Add\",\n    \"the\": true,\n    \"typescript-operations\": true,\n    \"plugin\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ndocuments: \\\"src/**/!(*.d).{ts,tsx}\\\"\\ngenerates:\\n  src/schema.ts:\\n    plugins:\\n      - typescript\\n      - typescript-operations\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Restart the app OR run the script to re-generate src/schema.ts\\\"\",\n    \"title\": \"\\\"Restart\",\n    \"the\": true,\n    \"app\": true,\n    \"OR\": true,\n    \"run\": true,\n    \"script\": true,\n    \"to\": true,\n    \"re-generate\": true,\n    \"src/schema.ts\\\"\": true\n  }), \"npm run gen\\n\\n# or\\n\\nyarn gen\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"31:43 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step4/App.tsx\\\" subtitle=\\\"Our current code\\\"\",\n    \"31:43\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step4/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, DogToyCollection } from './schema';\\nimport { useQuery, gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\nconst GET_TOYS_QUERY = gql`\\n  query ($maxPrice: Float) {\\n    dogToyCollection(where: {estimatedPrice_lt: $maxPrice}) {\\n      items {\\n        sys { id }\\n        toyName\\n        estimatedPrice\\n        toyPhoto { url }\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyResponse = {\\n  dogToyCollection: DogToyCollection\\n}\\n\\ntype DogToyVariables = {\\n  maxPrice: number\\n}\\n\\nconst App = () => {\\n  const { loading, error, data } = useQuery<DogToyResponse, DogToyVariables>(GET_TOYS_QUERY, {\\n    variables: {\\n      maxPrice: 20\\n    }\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"31:32 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step5/App.tsx\\\" subtitle=\\\"Utilizing the types from schema.ts\\\"\",\n    \"31:32\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step5/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Utilizing\",\n    \"the\": true,\n    \"types\": true,\n    \"from\": true,\n    \"schema.ts\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, GetToysUnderPriceQuery, GetToysUnderPriceQueryVariables } from './schema';\\nimport { useQuery, gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\nconst GET_TOYS_QUERY = gql`\\n  query getToysUnderPrice ($maxPrice: Float) {\\n    dogToyCollection(where: {estimatedPrice_lt: $maxPrice}) {\\n      items {\\n        sys { id }\\n        toyName\\n        estimatedPrice\\n        toyPhoto { url }\\n      }\\n    }\\n  }\\n`\\n\\nconst App = () => {\\n  const { loading, error, data } = useQuery<GetToysUnderPriceQuery, GetToysUnderPriceQueryVariables>(GET_TOYS_QUERY, {\\n    variables: {\\n      maxPrice: 20\\n    }\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"We can use codegen to simplify this even more! \\uD83D\\uDC81\\uD83C\\uDFFC\\u200D\\u2640\\uFE0F\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Install typescript-react-apollo codegen plugin\\\"\",\n    \"title\": \"\\\"Install\",\n    \"typescript-react-apollo\": true,\n    \"codegen\": true,\n    \"plugin\\\"\": true\n  }), \"npm install --save-dev @graphql-codegen/typescript-react-apollo\\n\\n# or\\n\\nyarn add -D @graphql-codegen/typescript-react-apollo\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"showNumbers title=\\\"codegen.yml\\\" file=\\\"src/step5/codegen.yml\\\" subtitle=\\\"Our current codegen configuration\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"codegen.yml\\\"\",\n    \"file\": \"\\\"src/step5/codegen.yml\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"codegen\": true,\n    \"configuration\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ndocuments: \\\"src/**/!(*.d).{ts,tsx}\\\"\\ngenerates:\\n  src/schema.ts:\\n    plugins:\\n      - typescript\\n      - typescript-operations\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"showNumbers title=\\\"codegen.yml\\\" file=\\\"src/step6/codegen.yml\\\" subtitle=\\\"Add the typescript-react-apollo plugin\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"codegen.yml\\\"\",\n    \"file\": \"\\\"src/step6/codegen.yml\\\"\",\n    \"subtitle\": \"\\\"Add\",\n    \"the\": true,\n    \"typescript-react-apollo\": true,\n    \"plugin\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ndocuments: \\\"src/**/!(*.d).{ts,tsx}\\\"\\ngenerates:\\n  src/schema.tsx:\\n    plugins:\\n      - typescript\\n      - typescript-operations\\n      - typescript-react-apollo\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Restart the app OR run the script to re-generate src/schema.tsx\\\"\",\n    \"title\": \"\\\"Restart\",\n    \"the\": true,\n    \"app\": true,\n    \"OR\": true,\n    \"run\": true,\n    \"script\": true,\n    \"to\": true,\n    \"re-generate\": true,\n    \"src/schema.tsx\\\"\": true\n  }), \"npm run gen\\n\\n# or\\n\\nyarn gen\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"32\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"32 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step5/App.tsx\\\" subtitle=\\\"Our current code\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step5/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, GetToysUnderPriceQuery, GetToysUnderPriceQueryVariables } from './schema';\\nimport { useQuery, gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\nconst GET_TOYS_QUERY = gql`\\n  query getToysUnderPrice ($maxPrice: Float) {\\n    dogToyCollection(where: {estimatedPrice_lt: $maxPrice}) {\\n      items {\\n        sys { id }\\n        toyName\\n        estimatedPrice\\n        toyPhoto { url }\\n      }\\n    }\\n  }\\n`\\n\\nconst App = () => {\\n  const { loading, error, data } = useQuery<GetToysUnderPriceQuery, GetToysUnderPriceQueryVariables>(GET_TOYS_QUERY, {\\n    variables: {\\n      maxPrice: 20\\n    }\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"32\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"32 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step6/App.tsx\\\" subtitle=\\\"Utilizing the types from schema.tsx\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step6/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Utilizing\",\n    \"the\": true,\n    \"types\": true,\n    \"from\": true,\n    \"schema.tsx\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, useGetToysUnderPriceQuery } from './schema';\\nimport { gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\ngql`\\n  query getToysUnderPrice ($maxPrice: Float) {\\n    dogToyCollection(where: {estimatedPrice_lt: $maxPrice}) {\\n      items {\\n        sys { id }\\n        toyName\\n        estimatedPrice\\n        toyPhoto { url }\\n      }\\n    }\\n  }\\n`\\n\\nconst App = () => {\\n  const { loading, error, data } = useGetToysUnderPriceQuery({\\n    variables: {\\n      maxPrice: 20\\n    }\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"What if you want to store your graphQL queries in *.graphql files?\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"showNumbers title=\\\"codegen.yml\\\" file=\\\"src/step6/codegen.yml\\\" subtitle=\\\"Our current codegen configuration\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"codegen.yml\\\"\",\n    \"file\": \"\\\"src/step6/codegen.yml\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"codegen\": true,\n    \"configuration\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ndocuments: \\\"src/**/!(*.d).{ts,tsx}\\\"\\ngenerates:\\n  src/schema.tsx:\\n    plugins:\\n      - typescript\\n      - typescript-operations\\n      - typescript-react-apollo\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"showNumbers title=\\\"codegen.yml\\\" file=\\\"src/step7/codegen.yml\\\" subtitle=\\\"Configure codegen to look for graphql files\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"codegen.yml\\\"\",\n    \"file\": \"\\\"src/step7/codegen.yml\\\"\",\n    \"subtitle\": \"\\\"Configure\",\n    \"codegen\": true,\n    \"to\": true,\n    \"look\": true,\n    \"for\": true,\n    \"graphql\": true,\n    \"files\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ndocuments:\\n  - \\\"src/**/!(*.d).{ts,tsx}\\\"\\n  - \\\"src/**/*.graphql\\\"\\ngenerates:\\n  src/schema.tsx:\\n    plugins:\\n      - typescript\\n      - typescript-operations\\n      - typescript-react-apollo\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"16:30 title=\\\"src/App.tsx\\\" file=\\\"src/step6/App.tsx\\\" subtitle=\\\"Our current code\\\"\",\n    \"16:30\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step6/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, useGetToysUnderPriceQuery } from './schema';\\nimport { gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\ngql`\\n  query getToysUnderPrice ($maxPrice: Float) {\\n    dogToyCollection(where: {estimatedPrice_lt: $maxPrice}) {\\n      items {\\n        sys { id }\\n        toyName\\n        estimatedPrice\\n        toyPhoto { url }\\n      }\\n    }\\n  }\\n`\\n\\nconst App = () => {\\n  const { loading, error, data } = useGetToysUnderPriceQuery({\\n    variables: {\\n      maxPrice: 20\\n    }\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\",\n    \"metastring\": \"1:10 title=\\\"src/getToysUnderPrice.graphql\\\" file=\\\"src/step7/getToysUnderPrice.graphql\\\" subtitle=\\\"Move the query to a new file\\\"\",\n    \"1:10\": true,\n    \"title\": \"\\\"src/getToysUnderPrice.graphql\\\"\",\n    \"file\": \"\\\"src/step7/getToysUnderPrice.graphql\\\"\",\n    \"subtitle\": \"\\\"Move\",\n    \"the\": true,\n    \"query\": true,\n    \"to\": true,\n    \"a\": true,\n    \"new\": true,\n    \"file\\\"\": true\n  }), \"query getToysUnderPrice ($maxPrice: Float) {\\n  dogToyCollection(where: {estimatedPrice_lt: $maxPrice}) {\\n    items {\\n      sys { id }\\n      toyName\\n      estimatedPrice\\n      toyPhoto { url }\\n    }\\n  }\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Let's add better IDE Support\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Install schema-ast codegen plugin\\\"\",\n    \"title\": \"\\\"Install\",\n    \"schema-ast\": true,\n    \"codegen\": true,\n    \"plugin\\\"\": true\n  }), \"npm install --save-dev @graphql-codegen/schema-ast\\n\\n# or\\n\\nyarn add -D @graphql-codegen/schema-ast\\n\"))), mdx(\"hr\", null), mdx(\"div\", {\n    style: {\n      display: 'flex',\n      textAlign: 'center'\n    }\n  }, mdx(\"div\", {\n    style: {\n      width: '50vw',\n      padding: '0 10px'\n    }\n  }, mdx(\"h2\", {\n    style: {\n      fontSize: '1.1em'\n    }\n  }, \"JetBrains\"), mdx(\"h3\", {\n    style: {\n      fontSize: '0.8em'\n    }\n  }, mdx(\"a\", {\n    href: \"https://plugins.jetbrains.com/plugin/8097-js-graphql\"\n  }, \"JS GraphQL Plugin\")), mdx(\"p\", {\n    style: {\n      fontSize: '0.7em'\n    }\n  }, \"GraphQL Config standards \", mdx(\"a\", {\n    href: \"https://github.com/kamilkisiela/graphql-config/tree/legacy#graphql-config\"\n  }, \"v2\"))), mdx(\"div\", {\n    style: {\n      width: '50vw',\n      padding: '0 10px'\n    }\n  }, mdx(\"h2\", {\n    style: {\n      fontSize: '1.1em'\n    }\n  }, \"VSCode\"), mdx(\"h3\", {\n    style: {\n      fontSize: '0.8em'\n    }\n  }, mdx(\"a\", {\n    href: \"https://marketplace.visualstudio.com/items?itemName=GraphQL.vscode-graphql\"\n  }, \"GraphQL extension\")), mdx(\"p\", {\n    style: {\n      fontSize: '0.7em'\n    }\n  }, \"GraphQL Config standards \", mdx(\"a\", {\n    href: \"https://graphql-config.com/usage\"\n  }, \"v3\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"Issue to \\\"Add or prepare for support of new GraphQL Config v3\\\": https://github.com/jimkyndemeyer/js-graphql-intellij-plugin/issues/296\"), mdx(\"hr\", null), mdx(\"div\", {\n    style: {\n      paddingLeft: '10px'\n    }\n  }, mdx(\"h2\", {\n    style: {\n      fontSize: '.8em',\n      margin: '5px 0 0'\n    }\n  }, mdx(\"a\", {\n    href: \"https://graphql-code-generator.com/docs/plugins/add\"\n  }, \"add\")), mdx(\"p\", {\n    style: {\n      fontSize: '.7em',\n      margin: '10px 0'\n    }\n  }, \"Add custom code to any codegen output\"), mdx(\"h2\", {\n    style: {\n      fontSize: '.8em',\n      margin: '1em 0 0'\n    }\n  }, mdx(\"a\", {\n    href: \"https://graphql-code-generator.com/docs/plugins/fragment-matcher\"\n  }, \"fragment-matcher\")), mdx(\"p\", {\n    style: {\n      fontSize: '.7em',\n      margin: '10px 0'\n    }\n  }, \"Useful for using complex interfaces and unions with apollo-client - represents the polymorphic relationships\"), mdx(\"h2\", {\n    style: {\n      fontSize: '.8em',\n      margin: '1em 0 0'\n    }\n  }, mdx(\"a\", {\n    href: \"https://graphql-code-generator.com/docs/plugins/typescript-resolvers\"\n  }, \"typescript-resolvers\")), mdx(\"p\", {\n    style: {\n      fontSize: '.7em',\n      margin: '10px 0'\n    }\n  }, \"Generates TS for resolve functions of your GraphQL API\"), mdx(\"h2\", {\n    style: {\n      fontSize: '.8em',\n      margin: '1em 0 0'\n    }\n  }, mdx(\"a\", {\n    href: \"https://graphql-code-generator.com/docs/plugins/named-operations-object\"\n  }, \"named-operations-object\")), mdx(\"p\", {\n    style: {\n      fontSize: '.7em',\n      margin: '10px 0'\n    }\n  }, \"Useful when using apollo-client refetchQueries\")), mdx(\"hr\", null), mdx(\"h1\", null, \"That's all folks!\"), mdx(\"h2\", null, \"\\uD83D\\uDE4C\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Have any follow-up questions?\"), mdx(\"p\", null, \"Feel free to ask me on Twitter! \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/RachelWebDev\"\n  }), \"@RachelWebDev\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","id":"9f744310-a7f6-54bd-b312-597dcf8228b6","slug":"","title":"Today we'll learn how to..."}},"staticQueryHashes":[]}