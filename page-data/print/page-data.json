{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"9f744310-a7f6-54bd-b312-597dcf8228b6","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Auto-generating Typescript for your content model\"), mdx(\"h3\", null, \"A workshop by your friends at Clover\"), mdx(\"hr\", null), mdx(\"h1\", null, \"My name is Rachel\"), mdx(\"p\", null, \"Contact me with any questions on Twitter! \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/RachelWebDev\"\n  }), \"@RachelWebDev\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Today we'll learn about...\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"codegen\"), \" to generate TS definitions from your Contentful project\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to utilize TS in conjunction with Apollo\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"codegen\"), \" to improve IDE checking of graphQL\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Why should you use Typescript?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"~15% of all JavaScript bugs can be detected by TypeScript*\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Static checking from inside your IDE\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Easier to refactor code without breaking it\")), mdx(\"p\", null, \"*\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://earlbarr.com/publications/typestudy.pdf\"\n  }), \"Per 2017 study\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Install TypeScript\\\" subtitle=\\\"then rename js files & restart the app\\\"\",\n    \"title\": \"\\\"Install\",\n    \"TypeScript\\\"\": true,\n    \"subtitle\": \"\\\"then\",\n    \"rename\": true,\n    \"js\": true,\n    \"files\": true,\n    \"&\": true,\n    \"restart\": true,\n    \"the\": true,\n    \"app\\\"\": true\n  }), \"npm install --save-dev typescript @types/node @types/react @types/react-dom @types/jest\\n\\n# or\\n\\nyarn add -D typescript @types/node @types/react @types/react-dom @types/jest\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\".env\\\" subtitle=\\\"Adding Contentful credentials\\\"\",\n    \"title\": \"\\\".env\\\"\",\n    \"subtitle\": \"\\\"Adding\",\n    \"Contentful\": true,\n    \"credentials\\\"\": true\n  }), \"REACT_APP_CONTENTFUL_SPACE_ID=z1e74uympjtv\\nREACT_APP_CONTENTFUL_ENVIRONMENT=master\\nREACT_APP_CONTENTFUL_API_KEY=hOSyAyj25eyBNh3tRBScPJLu40SRSx-EgjWGTdtrA98\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"13:24 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step0/App.jsx\\\" subtitle=\\\"Our query to get all toys\\\"\",\n    \"13:24\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step0/App.jsx\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"query\": true,\n    \"to\": true,\n    \"get\": true,\n    \"all\": true,\n    \"toys\\\"\": true\n  }), \"import React, { useEffect } from 'react';\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\nconst GET_TOYS_QUERY = `\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\nconst App = () => {\\n  const [{ data, loading, error }, setDogToyState] = React.useState({\\n    data: undefined,\\n    loading: true,\\n    error: undefined,\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = data?.dogToyCollection?.items || [];\\n\\n  // Fetch all dog toys from Contentful on page load\\n  useEffect(() => {\\n    // Set the loading flag to true and clear loading and error flags\\n    setDogToyState({ data: undefined, loading: true, error: undefined });\\n\\n    // Fetch the data from Contentful\\n    fetch(\\n      CONTENTFUL_GRAPHQL_ENDPOINT,\\n      {\\n        method: 'POST',\\n        headers: {\\n          Authorization: `Bearer ${API_KEY}`,\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ query: GET_TOYS_QUERY }),\\n      },\\n    )\\n      .then((res) => res.json())\\n      .then(({ data }) => {\\n        console.log('Received response from Contentful', data);\\n        setDogToyState({ data, loading: false, error: undefined })\\n      })\\n      .catch((err) => setDogToyState({ data: undefined, loading: false, error: err }))\\n  }, []);\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              <img src={toy.toyPhoto.url} alt=\\\"\\\"/>\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"42:57 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step0/App.jsx\\\" subtitle=\\\"Utilizing fetch to send the request then updating state\\\"\",\n    \"42:57\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step0/App.jsx\\\"\",\n    \"subtitle\": \"\\\"Utilizing\",\n    \"fetch\": true,\n    \"to\": true,\n    \"send\": true,\n    \"the\": true,\n    \"request\": true,\n    \"then\": true,\n    \"updating\": true,\n    \"state\\\"\": true\n  }), \"import React, { useEffect } from 'react';\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\nconst GET_TOYS_QUERY = `\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\nconst App = () => {\\n  const [{ data, loading, error }, setDogToyState] = React.useState({\\n    data: undefined,\\n    loading: true,\\n    error: undefined,\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = data?.dogToyCollection?.items || [];\\n\\n  // Fetch all dog toys from Contentful on page load\\n  useEffect(() => {\\n    // Set the loading flag to true and clear loading and error flags\\n    setDogToyState({ data: undefined, loading: true, error: undefined });\\n\\n    // Fetch the data from Contentful\\n    fetch(\\n      CONTENTFUL_GRAPHQL_ENDPOINT,\\n      {\\n        method: 'POST',\\n        headers: {\\n          Authorization: `Bearer ${API_KEY}`,\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ query: GET_TOYS_QUERY }),\\n      },\\n    )\\n      .then((res) => res.json())\\n      .then(({ data }) => {\\n        console.log('Received response from Contentful', data);\\n        setDogToyState({ data, loading: false, error: undefined })\\n      })\\n      .catch((err) => setDogToyState({ data: undefined, loading: false, error: err }))\\n  }, []);\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              <img src={toy.toyPhoto.url} alt=\\\"\\\"/>\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"27:32 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step0/App.jsx\\\" subtitle=\\\"Our state initialization\\\"\",\n    \"27:32\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step0/App.jsx\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"state\": true,\n    \"initialization\\\"\": true\n  }), \"import React, { useEffect } from 'react';\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\nconst GET_TOYS_QUERY = `\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\nconst App = () => {\\n  const [{ data, loading, error }, setDogToyState] = React.useState({\\n    data: undefined,\\n    loading: true,\\n    error: undefined,\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = data?.dogToyCollection?.items || [];\\n\\n  // Fetch all dog toys from Contentful on page load\\n  useEffect(() => {\\n    // Set the loading flag to true and clear loading and error flags\\n    setDogToyState({ data: undefined, loading: true, error: undefined });\\n\\n    // Fetch the data from Contentful\\n    fetch(\\n      CONTENTFUL_GRAPHQL_ENDPOINT,\\n      {\\n        method: 'POST',\\n        headers: {\\n          Authorization: `Bearer ${API_KEY}`,\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ query: GET_TOYS_QUERY }),\\n      },\\n    )\\n      .then((res) => res.json())\\n      .then(({ data }) => {\\n        console.log('Received response from Contentful', data);\\n        setDogToyState({ data, loading: false, error: undefined })\\n      })\\n      .catch((err) => setDogToyState({ data: undefined, loading: false, error: err }))\\n  }, []);\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              <img src={toy.toyPhoto.url} alt=\\\"\\\"/>\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"26:52 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step1/App.tsx\\\" subtitle=\\\"Adding a custom type to define the shape of our state\\\"\",\n    \"26:52\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step1/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Adding\",\n    \"a\": true,\n    \"custom\": true,\n    \"type\": true,\n    \"to\": true,\n    \"define\": true,\n    \"the\": true,\n    \"shape\": true,\n    \"of\": true,\n    \"our\": true,\n    \"state\\\"\": true\n  }), \"import React, { useEffect } from 'react';\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\nconst GET_TOYS_QUERY = `\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type representing a single DogToy entry with just the fields we are requesting in our above graphQL query\\n */\\ntype DogToy = {\\n  sys: { id: string };\\n  toyName: string;\\n  estimatedPrice: number;\\n  toyPhoto: { url: string };\\n};\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyCollection = {\\n  dogToyCollection: {\\n    items: DogToy[];\\n  }\\n}\\n\\nconst App = () => {\\n  const [{ data, loading, error }, setDogToyState] = React.useState<\\n    { data?: DogToyCollection; loading?: boolean; error?: unknown } // Inlined type representing the data saved in the state variable\\n  >({\\n    data: undefined,\\n    loading: true,\\n    error: undefined,\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = data?.dogToyCollection?.items || [];\\n\\n  // Fetch all dog toys from Contentful on page load\\n  useEffect(() => {\\n    // Set the loading flag to true and clear loading and error flags\\n    setDogToyState({ data: undefined, loading: true, error: undefined });\\n\\n    // Fetch the data from Contentful\\n    fetch(\\n      CONTENTFUL_GRAPHQL_ENDPOINT,\\n      {\\n        method: 'POST',\\n        headers: {\\n          Authorization: `Bearer ${API_KEY}`,\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ query: GET_TOYS_QUERY }),\\n      },\\n    )\\n      .then((res) => res.json())\\n      .then(({ data }) => {\\n        console.log('Received response from Contentful', data);\\n        setDogToyState({ data, loading: false, error: undefined })\\n      })\\n      .catch((err) => setDogToyState({ data: undefined, loading: false, error: err }))\\n  }, []);\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              <img src={toy.toyPhoto.url} alt=\\\"\\\"/>\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Install graphql-codegen\\\"\",\n    \"title\": \"\\\"Install\",\n    \"graphql-codegen\\\"\": true\n  }), \"npm install --save-dev @graphql-codegen/cli graphql @graphql-codegen/typescript\\n\\n# or\\n\\nyarn add -D @graphql-codegen/cli graphql @graphql-codegen/typescript\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"showNumbers title=\\\"codegen.yml\\\" file=\\\"src/step2/codegen.yml\\\" subtitle=\\\"Configure codegen\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"codegen.yml\\\"\",\n    \"file\": \"\\\"src/step2/codegen.yml\\\"\",\n    \"subtitle\": \"\\\"Configure\",\n    \"codegen\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ngenerates:\\n  src/schema.ts:\\n    plugins:\\n      - typescript\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-json\",\n    \"metastring\": \"3 title=\\\"package.json\\\" subtitle=\\\"Add a script to generate src/schema.ts\\\"\",\n    \"title\": \"\\\"package.json\\\"\",\n    \"subtitle\": \"\\\"Add\",\n    \"a\": true,\n    \"script\": true,\n    \"to\": true,\n    \"generate\": true,\n    \"src/schema.ts\\\"\": true\n  }), \"{\\n  \\\"scripts\\\": {\\n    \\\"gen\\\": \\\"graphql-codegen --config codegen.yml --require dotenv/config\\\",\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\"\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"3:5 title=\\\"package.json\\\" subtitle=\\\"Ensure this step is ran before starting the app\\\"\",\n    \"3:5\": true,\n    \"title\": \"\\\"package.json\\\"\",\n    \"subtitle\": \"\\\"Ensure\",\n    \"this\": true,\n    \"step\": true,\n    \"is\": true,\n    \"ran\": true,\n    \"before\": true,\n    \"starting\": true,\n    \"the\": true,\n    \"app\\\"\": true\n  }), \"{\\n  \\\"scripts\\\": {\\n    \\\"gen\\\": \\\"graphql-codegen --config codegen.yml --require dotenv/config\\\",\\n    \\\"start\\\": \\\"yarn gen && react-scripts start\\\",\\n    \\\"build\\\": \\\"yarn gen && react-scripts build\\\"\\n  }\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Restart the app OR run the script to generate src/schema.ts\\\"\",\n    \"title\": \"\\\"Restart\",\n    \"the\": true,\n    \"app\": true,\n    \"OR\": true,\n    \"run\": true,\n    \"script\": true,\n    \"to\": true,\n    \"generate\": true,\n    \"src/schema.ts\\\"\": true\n  }), \"npm run gen\\n\\n# or\\n\\nyarn gen\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"230:248 showNumbers title=\\\"src/schema.ts\\\" file=\\\"src/step2/schema.ts\\\"\",\n    \"230:248\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/schema.ts\\\"\",\n    \"file\": \"\\\"src/step2/schema.ts\\\"\"\n  }), \"export type Maybe<T> = T | null;\\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\\n/** All built-in and custom scalars, mapped to their actual values */\\nexport type Scalars = {\\n  ID: string;\\n  String: string;\\n  Boolean: boolean;\\n  Int: number;\\n  Float: number;\\n  /**\\n   * A date-time string at UTC, such as 2007-12-03T10:15:30Z,\\n   *     compliant with the 'date-time' format outlined in section 5.6 of\\n   *     the RFC 3339 profile of the ISO 8601 standard for representation\\n   *     of dates and times using the Gregorian calendar.\\n   */\\n  DateTime: any;\\n  /** The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`. */\\n  Dimension: any;\\n  /** The 'Quality' type represents quality as whole numeric values between `1` and `100`. */\\n  Quality: any;\\n  /** The 'HexColor' type represents color in `rgb:ffffff` string format. */\\n  HexColor: any;\\n};\\n\\nexport type Query = {\\n  __typename?: 'Query';\\n  asset?: Maybe<Asset>;\\n  assetCollection?: Maybe<AssetCollection>;\\n  dogToy?: Maybe<DogToy>;\\n  dogToyCollection?: Maybe<DogToyCollection>;\\n};\\n\\n\\nexport type QueryAssetArgs = {\\n  id: Scalars['String'];\\n  preview?: Maybe<Scalars['Boolean']>;\\n  locale?: Maybe<Scalars['String']>;\\n};\\n\\n\\nexport type QueryAssetCollectionArgs = {\\n  skip?: Maybe<Scalars['Int']>;\\n  limit?: Maybe<Scalars['Int']>;\\n  preview?: Maybe<Scalars['Boolean']>;\\n  locale?: Maybe<Scalars['String']>;\\n  where?: Maybe<AssetFilter>;\\n  order?: Maybe<Array<Maybe<AssetOrder>>>;\\n};\\n\\n\\nexport type QueryDogToyArgs = {\\n  id: Scalars['String'];\\n  preview?: Maybe<Scalars['Boolean']>;\\n  locale?: Maybe<Scalars['String']>;\\n};\\n\\n\\nexport type QueryDogToyCollectionArgs = {\\n  skip?: Maybe<Scalars['Int']>;\\n  limit?: Maybe<Scalars['Int']>;\\n  preview?: Maybe<Scalars['Boolean']>;\\n  locale?: Maybe<Scalars['String']>;\\n  where?: Maybe<DogToyFilter>;\\n  order?: Maybe<Array<Maybe<DogToyOrder>>>;\\n};\\n\\n/** Represents a binary file in a space. An asset can be any file type. */\\nexport type Asset = {\\n  __typename?: 'Asset';\\n  sys: Sys;\\n  title?: Maybe<Scalars['String']>;\\n  description?: Maybe<Scalars['String']>;\\n  contentType?: Maybe<Scalars['String']>;\\n  fileName?: Maybe<Scalars['String']>;\\n  size?: Maybe<Scalars['Int']>;\\n  url?: Maybe<Scalars['String']>;\\n  width?: Maybe<Scalars['Int']>;\\n  height?: Maybe<Scalars['Int']>;\\n  linkedFrom?: Maybe<AssetLinkingCollections>;\\n};\\n\\n\\n/** Represents a binary file in a space. An asset can be any file type. */\\nexport type AssetUrlArgs = {\\n  transform?: Maybe<ImageTransformOptions>;\\n};\\n\\nexport type Sys = {\\n  __typename?: 'Sys';\\n  id: Scalars['String'];\\n  spaceId: Scalars['String'];\\n  environmentId: Scalars['String'];\\n  publishedAt?: Maybe<Scalars['DateTime']>;\\n  firstPublishedAt?: Maybe<Scalars['DateTime']>;\\n  publishedVersion?: Maybe<Scalars['Int']>;\\n};\\n\\n\\nexport type ImageTransformOptions = {\\n  /** Desired width in pixels. Defaults to the original image width. */\\n  width?: Maybe<Scalars['Dimension']>;\\n  /** Desired height in pixels. Defaults to the original image height. */\\n  height?: Maybe<Scalars['Dimension']>;\\n  /**\\n   * Desired quality of the image in percents.\\n   *         Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.\\n   */\\n  quality?: Maybe<Scalars['Quality']>;\\n  /**\\n   * Desired corner radius in pixels.\\n   *         Results in an image with rounded corners (pass `-1` for a full circle/ellipse).\\n   *         Defaults to `0`. Uses desired background color as padding color,\\n   *         unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.\\n   */\\n  cornerRadius?: Maybe<Scalars['Int']>;\\n  /** Desired resize strategy. Defaults to `FIT`. */\\n  resizeStrategy?: Maybe<ImageResizeStrategy>;\\n  /** Desired resize focus area. Defaults to `CENTER`. */\\n  resizeFocus?: Maybe<ImageResizeFocus>;\\n  /**\\n   * Desired background color, used with corner radius or `PAD` resize strategy.\\n   *         Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).\\n   */\\n  backgroundColor?: Maybe<Scalars['HexColor']>;\\n  /** Desired image format. Defaults to the original image format. */\\n  format?: Maybe<ImageFormat>;\\n};\\n\\n\\n\\nexport enum ImageResizeStrategy {\\n  /** Resizes the image to fit into the specified dimensions. */\\n  Fit = 'FIT',\\n  /**\\n   * Resizes the image to the specified dimensions, padding the image if needed.\\n   *         Uses desired background color as padding color.\\n   */\\n  Pad = 'PAD',\\n  /** Resizes the image to the specified dimensions, cropping the image if needed. */\\n  Fill = 'FILL',\\n  /** Resizes the image to the specified dimensions, changing the original aspect ratio if needed. */\\n  Scale = 'SCALE',\\n  /** Crops a part of the original image to fit into the specified dimensions. */\\n  Crop = 'CROP',\\n  /** Creates a thumbnail from the image. */\\n  Thumb = 'THUMB'\\n}\\n\\nexport enum ImageResizeFocus {\\n  /** Focus the resizing on the center. */\\n  Center = 'CENTER',\\n  /** Focus the resizing on the top. */\\n  Top = 'TOP',\\n  /** Focus the resizing on the top right. */\\n  TopRight = 'TOP_RIGHT',\\n  /** Focus the resizing on the right. */\\n  Right = 'RIGHT',\\n  /** Focus the resizing on the bottom right. */\\n  BottomRight = 'BOTTOM_RIGHT',\\n  /** Focus the resizing on the bottom. */\\n  Bottom = 'BOTTOM',\\n  /** Focus the resizing on the bottom left. */\\n  BottomLeft = 'BOTTOM_LEFT',\\n  /** Focus the resizing on the left. */\\n  Left = 'LEFT',\\n  /** Focus the resizing on the top left. */\\n  TopLeft = 'TOP_LEFT',\\n  /** Focus the resizing on the largest face. */\\n  Face = 'FACE',\\n  /** Focus the resizing on the area containing all the faces. */\\n  Faces = 'FACES'\\n}\\n\\n\\nexport enum ImageFormat {\\n  /** JPG image format. */\\n  Jpg = 'JPG',\\n  /**\\n   * Progressive JPG format stores multiple passes of an image in progressively higher detail.\\n   *         When a progressive image is loading, the viewer will first see a lower quality pixelated version which\\n   *         will gradually improve in detail, until the image is fully downloaded. This is to display an image as\\n   *         early as possible to make the layout look as designed.\\n   */\\n  JpgProgressive = 'JPG_PROGRESSIVE',\\n  /** PNG image format */\\n  Png = 'PNG',\\n  /**\\n   * 8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.\\n   *         The 8-bit PNG format is mostly used for simple images, such as icons or logos.\\n   */\\n  Png8 = 'PNG8',\\n  /** WebP image format. */\\n  Webp = 'WEBP'\\n}\\n\\nexport type AssetLinkingCollections = {\\n  __typename?: 'AssetLinkingCollections';\\n  entryCollection?: Maybe<EntryCollection>;\\n  dogToyCollection?: Maybe<DogToyCollection>;\\n};\\n\\n\\nexport type AssetLinkingCollectionsEntryCollectionArgs = {\\n  skip?: Maybe<Scalars['Int']>;\\n  limit?: Maybe<Scalars['Int']>;\\n  preview?: Maybe<Scalars['Boolean']>;\\n  locale?: Maybe<Scalars['String']>;\\n};\\n\\n\\nexport type AssetLinkingCollectionsDogToyCollectionArgs = {\\n  skip?: Maybe<Scalars['Int']>;\\n  limit?: Maybe<Scalars['Int']>;\\n  preview?: Maybe<Scalars['Boolean']>;\\n  locale?: Maybe<Scalars['String']>;\\n};\\n\\nexport type EntryCollection = {\\n  __typename?: 'EntryCollection';\\n  total: Scalars['Int'];\\n  skip: Scalars['Int'];\\n  limit: Scalars['Int'];\\n  items: Array<Maybe<Entry>>;\\n};\\n\\nexport type Entry = {\\n  sys: Sys;\\n};\\n\\nexport type DogToyCollection = {\\n  __typename?: 'DogToyCollection';\\n  total: Scalars['Int'];\\n  skip: Scalars['Int'];\\n  limit: Scalars['Int'];\\n  items: Array<Maybe<DogToy>>;\\n};\\n\\n/** an assortment of toys for my new puppy [See type definition](https://app.contentful.com/spaces/z1e74uympjtv/content_types/dogToy) */\\nexport type DogToy = Entry & {\\n  __typename?: 'DogToy';\\n  sys: Sys;\\n  linkedFrom?: Maybe<DogToyLinkingCollections>;\\n  toyName?: Maybe<Scalars['String']>;\\n  toyPhoto?: Maybe<Asset>;\\n  puppyPhoto?: Maybe<Asset>;\\n  estimatedPrice?: Maybe<Scalars['Float']>;\\n  linkToBuy?: Maybe<Scalars['String']>;\\n};\\n\\n\\n/** an assortment of toys for my new puppy [See type definition](https://app.contentful.com/spaces/z1e74uympjtv/content_types/dogToy) */\\nexport type DogToyToyPhotoArgs = {\\n  preview?: Maybe<Scalars['Boolean']>;\\n  locale?: Maybe<Scalars['String']>;\\n};\\n\\n\\n/** an assortment of toys for my new puppy [See type definition](https://app.contentful.com/spaces/z1e74uympjtv/content_types/dogToy) */\\nexport type DogToyPuppyPhotoArgs = {\\n  preview?: Maybe<Scalars['Boolean']>;\\n  locale?: Maybe<Scalars['String']>;\\n};\\n\\nexport type DogToyLinkingCollections = {\\n  __typename?: 'DogToyLinkingCollections';\\n  entryCollection?: Maybe<EntryCollection>;\\n};\\n\\n\\nexport type DogToyLinkingCollectionsEntryCollectionArgs = {\\n  skip?: Maybe<Scalars['Int']>;\\n  limit?: Maybe<Scalars['Int']>;\\n  preview?: Maybe<Scalars['Boolean']>;\\n  locale?: Maybe<Scalars['String']>;\\n};\\n\\nexport type AssetFilter = {\\n  sys?: Maybe<SysFilter>;\\n  title_exists?: Maybe<Scalars['Boolean']>;\\n  title?: Maybe<Scalars['String']>;\\n  title_not?: Maybe<Scalars['String']>;\\n  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  title_contains?: Maybe<Scalars['String']>;\\n  title_not_contains?: Maybe<Scalars['String']>;\\n  description_exists?: Maybe<Scalars['Boolean']>;\\n  description?: Maybe<Scalars['String']>;\\n  description_not?: Maybe<Scalars['String']>;\\n  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  description_contains?: Maybe<Scalars['String']>;\\n  description_not_contains?: Maybe<Scalars['String']>;\\n  url_exists?: Maybe<Scalars['Boolean']>;\\n  url?: Maybe<Scalars['String']>;\\n  url_not?: Maybe<Scalars['String']>;\\n  url_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  url_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  url_contains?: Maybe<Scalars['String']>;\\n  url_not_contains?: Maybe<Scalars['String']>;\\n  size_exists?: Maybe<Scalars['Boolean']>;\\n  size?: Maybe<Scalars['Int']>;\\n  size_not?: Maybe<Scalars['Int']>;\\n  size_in?: Maybe<Array<Maybe<Scalars['Int']>>>;\\n  size_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;\\n  size_gt?: Maybe<Scalars['Int']>;\\n  size_gte?: Maybe<Scalars['Int']>;\\n  size_lt?: Maybe<Scalars['Int']>;\\n  size_lte?: Maybe<Scalars['Int']>;\\n  contentType_exists?: Maybe<Scalars['Boolean']>;\\n  contentType?: Maybe<Scalars['String']>;\\n  contentType_not?: Maybe<Scalars['String']>;\\n  contentType_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  contentType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  contentType_contains?: Maybe<Scalars['String']>;\\n  contentType_not_contains?: Maybe<Scalars['String']>;\\n  fileName_exists?: Maybe<Scalars['Boolean']>;\\n  fileName?: Maybe<Scalars['String']>;\\n  fileName_not?: Maybe<Scalars['String']>;\\n  fileName_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  fileName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  fileName_contains?: Maybe<Scalars['String']>;\\n  fileName_not_contains?: Maybe<Scalars['String']>;\\n  width_exists?: Maybe<Scalars['Boolean']>;\\n  width?: Maybe<Scalars['Int']>;\\n  width_not?: Maybe<Scalars['Int']>;\\n  width_in?: Maybe<Array<Maybe<Scalars['Int']>>>;\\n  width_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;\\n  width_gt?: Maybe<Scalars['Int']>;\\n  width_gte?: Maybe<Scalars['Int']>;\\n  width_lt?: Maybe<Scalars['Int']>;\\n  width_lte?: Maybe<Scalars['Int']>;\\n  height_exists?: Maybe<Scalars['Boolean']>;\\n  height?: Maybe<Scalars['Int']>;\\n  height_not?: Maybe<Scalars['Int']>;\\n  height_in?: Maybe<Array<Maybe<Scalars['Int']>>>;\\n  height_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;\\n  height_gt?: Maybe<Scalars['Int']>;\\n  height_gte?: Maybe<Scalars['Int']>;\\n  height_lt?: Maybe<Scalars['Int']>;\\n  height_lte?: Maybe<Scalars['Int']>;\\n  OR?: Maybe<Array<Maybe<AssetFilter>>>;\\n  AND?: Maybe<Array<Maybe<AssetFilter>>>;\\n};\\n\\nexport type SysFilter = {\\n  id_exists?: Maybe<Scalars['Boolean']>;\\n  id?: Maybe<Scalars['String']>;\\n  id_not?: Maybe<Scalars['String']>;\\n  id_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  id_contains?: Maybe<Scalars['String']>;\\n  id_not_contains?: Maybe<Scalars['String']>;\\n  publishedAt_exists?: Maybe<Scalars['Boolean']>;\\n  publishedAt?: Maybe<Scalars['String']>;\\n  publishedAt_not?: Maybe<Scalars['String']>;\\n  publishedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  publishedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  publishedAt_contains?: Maybe<Scalars['String']>;\\n  publishedAt_not_contains?: Maybe<Scalars['String']>;\\n  firstPublishedAt_exists?: Maybe<Scalars['Boolean']>;\\n  firstPublishedAt?: Maybe<Scalars['String']>;\\n  firstPublishedAt_not?: Maybe<Scalars['String']>;\\n  firstPublishedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  firstPublishedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  firstPublishedAt_contains?: Maybe<Scalars['String']>;\\n  firstPublishedAt_not_contains?: Maybe<Scalars['String']>;\\n  publishedVersion_exists?: Maybe<Scalars['Boolean']>;\\n  publishedVersion?: Maybe<Scalars['String']>;\\n  publishedVersion_not?: Maybe<Scalars['String']>;\\n  publishedVersion_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  publishedVersion_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  publishedVersion_contains?: Maybe<Scalars['String']>;\\n  publishedVersion_not_contains?: Maybe<Scalars['String']>;\\n};\\n\\nexport enum AssetOrder {\\n  UrlAsc = 'url_ASC',\\n  UrlDesc = 'url_DESC',\\n  SizeAsc = 'size_ASC',\\n  SizeDesc = 'size_DESC',\\n  ContentTypeAsc = 'contentType_ASC',\\n  ContentTypeDesc = 'contentType_DESC',\\n  FileNameAsc = 'fileName_ASC',\\n  FileNameDesc = 'fileName_DESC',\\n  WidthAsc = 'width_ASC',\\n  WidthDesc = 'width_DESC',\\n  HeightAsc = 'height_ASC',\\n  HeightDesc = 'height_DESC',\\n  SysIdAsc = 'sys_id_ASC',\\n  SysIdDesc = 'sys_id_DESC',\\n  SysPublishedAtAsc = 'sys_publishedAt_ASC',\\n  SysPublishedAtDesc = 'sys_publishedAt_DESC',\\n  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',\\n  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',\\n  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',\\n  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'\\n}\\n\\nexport type AssetCollection = {\\n  __typename?: 'AssetCollection';\\n  total: Scalars['Int'];\\n  skip: Scalars['Int'];\\n  limit: Scalars['Int'];\\n  items: Array<Maybe<Asset>>;\\n};\\n\\nexport type DogToyFilter = {\\n  sys?: Maybe<SysFilter>;\\n  toyName_exists?: Maybe<Scalars['Boolean']>;\\n  toyName?: Maybe<Scalars['String']>;\\n  toyName_not?: Maybe<Scalars['String']>;\\n  toyName_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  toyName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  toyName_contains?: Maybe<Scalars['String']>;\\n  toyName_not_contains?: Maybe<Scalars['String']>;\\n  estimatedPrice_exists?: Maybe<Scalars['Boolean']>;\\n  estimatedPrice?: Maybe<Scalars['Float']>;\\n  estimatedPrice_not?: Maybe<Scalars['Float']>;\\n  estimatedPrice_in?: Maybe<Array<Maybe<Scalars['Float']>>>;\\n  estimatedPrice_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;\\n  estimatedPrice_gt?: Maybe<Scalars['Float']>;\\n  estimatedPrice_gte?: Maybe<Scalars['Float']>;\\n  estimatedPrice_lt?: Maybe<Scalars['Float']>;\\n  estimatedPrice_lte?: Maybe<Scalars['Float']>;\\n  linkToBuy_exists?: Maybe<Scalars['Boolean']>;\\n  linkToBuy?: Maybe<Scalars['String']>;\\n  linkToBuy_not?: Maybe<Scalars['String']>;\\n  linkToBuy_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  linkToBuy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;\\n  linkToBuy_contains?: Maybe<Scalars['String']>;\\n  linkToBuy_not_contains?: Maybe<Scalars['String']>;\\n  OR?: Maybe<Array<Maybe<DogToyFilter>>>;\\n  AND?: Maybe<Array<Maybe<DogToyFilter>>>;\\n};\\n\\nexport enum DogToyOrder {\\n  ToyNameAsc = 'toyName_ASC',\\n  ToyNameDesc = 'toyName_DESC',\\n  EstimatedPriceAsc = 'estimatedPrice_ASC',\\n  EstimatedPriceDesc = 'estimatedPrice_DESC',\\n  LinkToBuyAsc = 'linkToBuy_ASC',\\n  LinkToBuyDesc = 'linkToBuy_DESC',\\n  SysIdAsc = 'sys_id_ASC',\\n  SysIdDesc = 'sys_id_DESC',\\n  SysPublishedAtAsc = 'sys_publishedAt_ASC',\\n  SysPublishedAtDesc = 'sys_publishedAt_DESC',\\n  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',\\n  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',\\n  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',\\n  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"26:52 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step1/App.tsx\\\" subtitle=\\\"Our current code\\\"\",\n    \"26:52\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step1/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import React, { useEffect } from 'react';\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\nconst GET_TOYS_QUERY = `\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type representing a single DogToy entry with just the fields we are requesting in our above graphQL query\\n */\\ntype DogToy = {\\n  sys: { id: string };\\n  toyName: string;\\n  estimatedPrice: number;\\n  toyPhoto: { url: string };\\n};\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyCollection = {\\n  dogToyCollection: {\\n    items: DogToy[];\\n  }\\n}\\n\\nconst App = () => {\\n  const [{ data, loading, error }, setDogToyState] = React.useState<\\n    { data?: DogToyCollection; loading?: boolean; error?: unknown } // Inlined type representing the data saved in the state variable\\n  >({\\n    data: undefined,\\n    loading: true,\\n    error: undefined,\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = data?.dogToyCollection?.items || [];\\n\\n  // Fetch all dog toys from Contentful on page load\\n  useEffect(() => {\\n    // Set the loading flag to true and clear loading and error flags\\n    setDogToyState({ data: undefined, loading: true, error: undefined });\\n\\n    // Fetch the data from Contentful\\n    fetch(\\n      CONTENTFUL_GRAPHQL_ENDPOINT,\\n      {\\n        method: 'POST',\\n        headers: {\\n          Authorization: `Bearer ${API_KEY}`,\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ query: GET_TOYS_QUERY }),\\n      },\\n    )\\n      .then((res) => res.json())\\n      .then(({ data }) => {\\n        console.log('Received response from Contentful', data);\\n        setDogToyState({ data, loading: false, error: undefined })\\n      })\\n      .catch((err) => setDogToyState({ data: undefined, loading: false, error: err }))\\n  }, []);\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              <img src={toy.toyPhoto.url} alt=\\\"\\\"/>\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"2,28:42 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step2/App.tsx\\\" subtitle=\\\"Import and use DogToyCollection from schema.ts\\\"\",\n    \"2,28:42\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step2/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Import\",\n    \"and\": true,\n    \"use\": true,\n    \"DogToyCollection\": true,\n    \"from\": true,\n    \"schema.ts\\\"\": true\n  }), \"import React, { useEffect } from 'react';\\nimport { DogToy, DogToyCollection } from './schema';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\nconst GET_TOYS_QUERY = `\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyResponse = {\\n  dogToyCollection: DogToyCollection\\n}\\n\\nconst App = () => {\\n  const [{ data, loading, error }, setDogToyState] = React.useState<\\n    { data?: DogToyResponse; loading?: boolean; error?: unknown } // Inlined type representing the data saved in the state variable\\n  >({\\n    data: undefined,\\n    loading: true,\\n    error: undefined,\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  // Fetch all dog toys from Contentful on page load\\n  useEffect(() => {\\n    // Set the loading flag to true and clear loading and error flags\\n    setDogToyState({ data: undefined, loading: true, error: undefined });\\n\\n    // Fetch the data from Contentful\\n    fetch(\\n      CONTENTFUL_GRAPHQL_ENDPOINT,\\n      {\\n        method: 'POST',\\n        headers: {\\n          Authorization: `Bearer ${API_KEY}`,\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ query: GET_TOYS_QUERY }),\\n      },\\n    )\\n      .then((res) => res.json())\\n      .then(({ data }) => {\\n        console.log('Received response from Contentful', data);\\n        setDogToyState({ data, loading: false, error: undefined })\\n      })\\n      .catch((err) => setDogToyState({ data: undefined, loading: false, error: err }))\\n  }, []);\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"28:42 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step2/App.tsx\\\" subtitle=\\\"Using DogToyCollection\\\"\",\n    \"28:42\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step2/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Using\",\n    \"DogToyCollection\\\"\": true\n  }), \"import React, { useEffect } from 'react';\\nimport { DogToy, DogToyCollection } from './schema';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\nconst GET_TOYS_QUERY = `\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyResponse = {\\n  dogToyCollection: DogToyCollection\\n}\\n\\nconst App = () => {\\n  const [{ data, loading, error }, setDogToyState] = React.useState<\\n    { data?: DogToyResponse; loading?: boolean; error?: unknown } // Inlined type representing the data saved in the state variable\\n  >({\\n    data: undefined,\\n    loading: true,\\n    error: undefined,\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  // Fetch all dog toys from Contentful on page load\\n  useEffect(() => {\\n    // Set the loading flag to true and clear loading and error flags\\n    setDogToyState({ data: undefined, loading: true, error: undefined });\\n\\n    // Fetch the data from Contentful\\n    fetch(\\n      CONTENTFUL_GRAPHQL_ENDPOINT,\\n      {\\n        method: 'POST',\\n        headers: {\\n          Authorization: `Bearer ${API_KEY}`,\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ query: GET_TOYS_QUERY }),\\n      },\\n    )\\n      .then((res) => res.json())\\n      .then(({ data }) => {\\n        console.log('Received response from Contentful', data);\\n        setDogToyState({ data, loading: false, error: undefined })\\n      })\\n      .catch((err) => setDogToyState({ data: undefined, loading: false, error: err }))\\n  }, []);\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"26:52 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step1/App.tsx\\\" subtitle=\\\"Before..\\\"\",\n    \"26:52\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step1/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Before..\\\"\"\n  }), \"import React, { useEffect } from 'react';\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\nconst GET_TOYS_QUERY = `\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type representing a single DogToy entry with just the fields we are requesting in our above graphQL query\\n */\\ntype DogToy = {\\n  sys: { id: string };\\n  toyName: string;\\n  estimatedPrice: number;\\n  toyPhoto: { url: string };\\n};\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyCollection = {\\n  dogToyCollection: {\\n    items: DogToy[];\\n  }\\n}\\n\\nconst App = () => {\\n  const [{ data, loading, error }, setDogToyState] = React.useState<\\n    { data?: DogToyCollection; loading?: boolean; error?: unknown } // Inlined type representing the data saved in the state variable\\n  >({\\n    data: undefined,\\n    loading: true,\\n    error: undefined,\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = data?.dogToyCollection?.items || [];\\n\\n  // Fetch all dog toys from Contentful on page load\\n  useEffect(() => {\\n    // Set the loading flag to true and clear loading and error flags\\n    setDogToyState({ data: undefined, loading: true, error: undefined });\\n\\n    // Fetch the data from Contentful\\n    fetch(\\n      CONTENTFUL_GRAPHQL_ENDPOINT,\\n      {\\n        method: 'POST',\\n        headers: {\\n          Authorization: `Bearer ${API_KEY}`,\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ query: GET_TOYS_QUERY }),\\n      },\\n    )\\n      .then((res) => res.json())\\n      .then(({ data }) => {\\n        console.log('Received response from Contentful', data);\\n        setDogToyState({ data, loading: false, error: undefined })\\n      })\\n      .catch((err) => setDogToyState({ data: undefined, loading: false, error: err }))\\n  }, []);\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              <img src={toy.toyPhoto.url} alt=\\\"\\\"/>\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Can we make this smarter?\"), mdx(\"hr\", null), mdx(\"hr\", null), mdx(\"p\", null, \"What could Apollo Client give us?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"parsing of our graphQL queries\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"intelligent caching\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"less code - utilize the useQuery Hook\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Install Apollo Client\\\"\",\n    \"title\": \"\\\"Install\",\n    \"Apollo\": true,\n    \"Client\\\"\": true\n  }), \"npm install --save-dev @apollo/client\\n\\n# or\\n\\nyarn add -D typescript @apollo/client\\n\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"showNumbers title=\\\"src/index.tsx\\\" file=\\\"src/step2/index.tsx\\\" subtitle=\\\"Our current code\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/index.tsx\\\"\",\n    \"file\": \"\\\"src/step2/index.tsx\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\n\\nReactDOM.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>,\\n  document.getElementById('root')\\n);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"showNumbers title=\\\"src/index.tsx\\\" file=\\\"src/step3/index.tsx\\\" subtitle=\\\"Add and configure ApolloProvider\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/index.tsx\\\"\",\n    \"file\": \"\\\"src/step3/index.tsx\\\"\",\n    \"subtitle\": \"\\\"Add\",\n    \"and\": true,\n    \"configure\": true,\n    \"ApolloProvider\\\"\": true\n  }), \"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nexport const apolloClient = new ApolloClient({\\n  uri: `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`,\\n  headers: {\\n    Authorization: `Bearer ${API_KEY}`,\\n  },\\n  cache: new InMemoryCache(),\\n});\\n\\nReactDOM.render(\\n  <React.StrictMode>\\n    <ApolloProvider client={apolloClient}>\\n      <App/>\\n    </ApolloProvider>\\n  </React.StrictMode>,\\n  document.getElementById('root')\\n);\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"35:71 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step2/App.tsx\\\" subtitle=\\\"Our current code\\\"\",\n    \"35:71\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step2/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import React, { useEffect } from 'react';\\nimport { DogToy, DogToyCollection } from './schema';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\nconst GET_TOYS_QUERY = `\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyResponse = {\\n  dogToyCollection: DogToyCollection\\n}\\n\\nconst App = () => {\\n  const [{ data, loading, error }, setDogToyState] = React.useState<\\n    { data?: DogToyResponse; loading?: boolean; error?: unknown } // Inlined type representing the data saved in the state variable\\n  >({\\n    data: undefined,\\n    loading: true,\\n    error: undefined,\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  // Fetch all dog toys from Contentful on page load\\n  useEffect(() => {\\n    // Set the loading flag to true and clear loading and error flags\\n    setDogToyState({ data: undefined, loading: true, error: undefined });\\n\\n    // Fetch the data from Contentful\\n    fetch(\\n      CONTENTFUL_GRAPHQL_ENDPOINT,\\n      {\\n        method: 'POST',\\n        headers: {\\n          Authorization: `Bearer ${API_KEY}`,\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ query: GET_TOYS_QUERY }),\\n      },\\n    )\\n      .then((res) => res.json())\\n      .then(({ data }) => {\\n        console.log('Received response from Contentful', data);\\n        setDogToyState({ data, loading: false, error: undefined })\\n      })\\n      .catch((err) => setDogToyState({ data: undefined, loading: false, error: err }))\\n  }, []);\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"39\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"39 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step3/App.tsx\\\" subtitle=\\\"Utilizing apollo client\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step3/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Utilizing\",\n    \"apollo\": true,\n    \"client\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, DogToyCollection } from './schema';\\nimport { useQuery, gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\nconst GET_TOYS_QUERY = gql`\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyResponse = {\\n  dogToyCollection: DogToyCollection\\n}\\n\\nconst App = () => {\\n  const { loading, error, data } = useQuery<DogToyResponse>(GET_TOYS_QUERY);\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"16:29 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step3/App.tsx\\\" subtitle=\\\"useQuery expects a GraphQL AST\\\"\",\n    \"16:29\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step3/App.tsx\\\"\",\n    \"subtitle\": \"\\\"useQuery\",\n    \"expects\": true,\n    \"a\": true,\n    \"GraphQL\": true,\n    \"AST\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, DogToyCollection } from './schema';\\nimport { useQuery, gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\nconst GET_TOYS_QUERY = gql`\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyResponse = {\\n  dogToyCollection: DogToyCollection\\n}\\n\\nconst App = () => {\\n  const { loading, error, data } = useQuery<DogToyResponse>(GET_TOYS_QUERY);\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"18:39 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step3/App.tsx\\\" subtitle=\\\"What if we want to add a graphql variable?\\\"\",\n    \"18:39\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step3/App.tsx\\\"\",\n    \"subtitle\": \"\\\"What\",\n    \"if\": true,\n    \"we\": true,\n    \"want\": true,\n    \"to\": true,\n    \"add\": true,\n    \"a\": true,\n    \"graphql\": true,\n    \"variable?\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, DogToyCollection } from './schema';\\nimport { useQuery, gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\nconst GET_TOYS_QUERY = gql`\\n  query {\\n    dogToyCollection {\\n      items {\\n        sys { id },\\n        toyName,\\n        estimatedPrice,\\n        toyPhoto { url },\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyResponse = {\\n  dogToyCollection: DogToyCollection\\n}\\n\\nconst App = () => {\\n  const { loading, error, data } = useQuery<DogToyResponse>(GET_TOYS_QUERY);\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"18:47 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step4/App.tsx\\\" subtitle=\\\"Declarative usage of graphql variables\\\"\",\n    \"18:47\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step4/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Declarative\",\n    \"usage\": true,\n    \"of\": true,\n    \"graphql\": true,\n    \"variables\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, DogToyCollection } from './schema';\\nimport { useQuery, gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\nconst GET_TOYS_QUERY = gql`\\n  query ($maxPrice: Float) {\\n    dogToyCollection(where: {estimatedPrice_lt: $maxPrice}) {\\n      items {\\n        sys { id }\\n        toyName\\n        estimatedPrice\\n        toyPhoto { url }\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyResponse = {\\n  dogToyCollection: DogToyCollection\\n}\\n\\ntype DogToyVariables = {\\n  maxPrice: number\\n}\\n\\nconst App = () => {\\n  const { loading, error, data } = useQuery<DogToyResponse, DogToyVariables>(GET_TOYS_QUERY, {\\n    variables: {\\n      maxPrice: 20\\n    }\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Let's utilize codegen to create the types for us\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Install typescript-operations plugin\\\"\",\n    \"title\": \"\\\"Install\",\n    \"typescript-operations\": true,\n    \"plugin\\\"\": true\n  }), \"npm install --save-dev @graphql-codegen/typescript-operations\\n\\n# or\\n\\nyarn add -D @graphql-codegen/typescript-operations\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"showNumbers title=\\\"codegen.yml\\\" file=\\\"src/step2/codegen.yml\\\" subtitle=\\\"Our current codegen configuration\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"codegen.yml\\\"\",\n    \"file\": \"\\\"src/step2/codegen.yml\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"codegen\": true,\n    \"configuration\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ngenerates:\\n  src/schema.ts:\\n    plugins:\\n      - typescript\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"showNumbers title=\\\"codegen.yml\\\" file=\\\"src/step5/codegen.yml\\\" subtitle=\\\"Add the typescript-operations plugin\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"codegen.yml\\\"\",\n    \"file\": \"\\\"src/step5/codegen.yml\\\"\",\n    \"subtitle\": \"\\\"Add\",\n    \"the\": true,\n    \"typescript-operations\": true,\n    \"plugin\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ndocuments: \\\"src/**/!(*.d).{ts,tsx}\\\"\\ngenerates:\\n  src/schema.ts:\\n    plugins:\\n      - typescript\\n      - typescript-operations\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Restart the app OR run the script to re-generate src/schema.ts\\\"\",\n    \"title\": \"\\\"Restart\",\n    \"the\": true,\n    \"app\": true,\n    \"OR\": true,\n    \"run\": true,\n    \"script\": true,\n    \"to\": true,\n    \"re-generate\": true,\n    \"src/schema.ts\\\"\": true\n  }), \"npm run gen\\n\\n# or\\n\\nyarn gen\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"31:43 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step4/App.tsx\\\" subtitle=\\\"Our current code\\\"\",\n    \"31:43\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step4/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, DogToyCollection } from './schema';\\nimport { useQuery, gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\nconst GET_TOYS_QUERY = gql`\\n  query ($maxPrice: Float) {\\n    dogToyCollection(where: {estimatedPrice_lt: $maxPrice}) {\\n      items {\\n        sys { id }\\n        toyName\\n        estimatedPrice\\n        toyPhoto { url }\\n      }\\n    }\\n  }\\n`\\n\\n/**\\n * TS type mirroring the structure of our graphQL query\\n */\\ntype DogToyResponse = {\\n  dogToyCollection: DogToyCollection\\n}\\n\\ntype DogToyVariables = {\\n  maxPrice: number\\n}\\n\\nconst App = () => {\\n  const { loading, error, data } = useQuery<DogToyResponse, DogToyVariables>(GET_TOYS_QUERY, {\\n    variables: {\\n      maxPrice: 20\\n    }\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"31:32 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step5/App.tsx\\\" subtitle=\\\"Utilizing the types from schema.ts\\\"\",\n    \"31:32\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step5/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Utilizing\",\n    \"the\": true,\n    \"types\": true,\n    \"from\": true,\n    \"schema.ts\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, GetToysUnderPriceQuery, GetToysUnderPriceQueryVariables } from './schema';\\nimport { useQuery, gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\nconst GET_TOYS_QUERY = gql`\\n  query getToysUnderPrice ($maxPrice: Float) {\\n    dogToyCollection(where: {estimatedPrice_lt: $maxPrice}) {\\n      items {\\n        sys { id }\\n        toyName\\n        estimatedPrice\\n        toyPhoto { url }\\n      }\\n    }\\n  }\\n`\\n\\nconst App = () => {\\n  const { loading, error, data } = useQuery<GetToysUnderPriceQuery, GetToysUnderPriceQueryVariables>(GET_TOYS_QUERY, {\\n    variables: {\\n      maxPrice: 20\\n    }\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"We can use codegen to simplify this even more!\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Install typescript-operations plugin\\\"\",\n    \"title\": \"\\\"Install\",\n    \"typescript-operations\": true,\n    \"plugin\\\"\": true\n  }), \"npm install --save-dev @graphql-codegen/typescript-react-apollo\\n\\n# or\\n\\nyarn add -D @graphql-codegen/typescript-react-apollo\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"showNumbers title=\\\"codegen.yml\\\" file=\\\"src/step5/codegen.yml\\\" subtitle=\\\"Our current codegen configuration\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"codegen.yml\\\"\",\n    \"file\": \"\\\"src/step5/codegen.yml\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"codegen\": true,\n    \"configuration\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ndocuments: \\\"src/**/!(*.d).{ts,tsx}\\\"\\ngenerates:\\n  src/schema.ts:\\n    plugins:\\n      - typescript\\n      - typescript-operations\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"showNumbers title=\\\"codegen.yml\\\" file=\\\"src/step6/codegen.yml\\\" subtitle=\\\"Add the typescript-react-apollo plugin\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"codegen.yml\\\"\",\n    \"file\": \"\\\"src/step6/codegen.yml\\\"\",\n    \"subtitle\": \"\\\"Add\",\n    \"the\": true,\n    \"typescript-react-apollo\": true,\n    \"plugin\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ndocuments: \\\"src/**/!(*.d).{ts,tsx}\\\"\\ngenerates:\\n  src/schema.tsx:\\n    plugins:\\n      - typescript\\n      - typescript-operations\\n      - typescript-react-apollo\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Restart the app OR run the script to re-generate src/schema.tsx\\\"\",\n    \"title\": \"\\\"Restart\",\n    \"the\": true,\n    \"app\": true,\n    \"OR\": true,\n    \"run\": true,\n    \"script\": true,\n    \"to\": true,\n    \"re-generate\": true,\n    \"src/schema.tsx\\\"\": true\n  }), \"npm run gen\\n\\n# or\\n\\nyarn gen\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"32\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"32 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step5/App.tsx\\\" subtitle=\\\"Our current code\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step5/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, GetToysUnderPriceQuery, GetToysUnderPriceQueryVariables } from './schema';\\nimport { useQuery, gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\nconst GET_TOYS_QUERY = gql`\\n  query getToysUnderPrice ($maxPrice: Float) {\\n    dogToyCollection(where: {estimatedPrice_lt: $maxPrice}) {\\n      items {\\n        sys { id }\\n        toyName\\n        estimatedPrice\\n        toyPhoto { url }\\n      }\\n    }\\n  }\\n`\\n\\nconst App = () => {\\n  const { loading, error, data } = useQuery<GetToysUnderPriceQuery, GetToysUnderPriceQueryVariables>(GET_TOYS_QUERY, {\\n    variables: {\\n      maxPrice: 20\\n    }\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step6/App.tsx\\\" subtitle=\\\"Utilizing the types from schema.tsx\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step6/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Utilizing\",\n    \"the\": true,\n    \"types\": true,\n    \"from\": true,\n    \"schema.tsx\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, useGetToysUnderPriceQuery } from './schema';\\nimport { gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\ngql`\\n  query getToysUnderPrice ($maxPrice: Float) {\\n    dogToyCollection(where: {estimatedPrice_lt: $maxPrice}) {\\n      items {\\n        sys { id }\\n        toyName\\n        estimatedPrice\\n        toyPhoto { url }\\n      }\\n    }\\n  }\\n`\\n\\nconst App = () => {\\n  const { loading, error, data } = useGetToysUnderPriceQuery({\\n    variables: {\\n      maxPrice: 20\\n    }\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"What if you want to store your graphQL queries in *.graphql files?\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"showNumbers title=\\\"codegen.yml\\\" file=\\\"src/step6/codegen.yml\\\" subtitle=\\\"Our current codegen configuration\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"codegen.yml\\\"\",\n    \"file\": \"\\\"src/step6/codegen.yml\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"codegen\": true,\n    \"configuration\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ndocuments: \\\"src/**/!(*.d).{ts,tsx}\\\"\\ngenerates:\\n  src/schema.tsx:\\n    plugins:\\n      - typescript\\n      - typescript-operations\\n      - typescript-react-apollo\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"showNumbers title=\\\"codegen.yml\\\" file=\\\"src/step7/codegen.yml\\\" subtitle=\\\"Configure codegen to look for graphql files\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"codegen.yml\\\"\",\n    \"file\": \"\\\"src/step7/codegen.yml\\\"\",\n    \"subtitle\": \"\\\"Configure\",\n    \"codegen\": true,\n    \"to\": true,\n    \"look\": true,\n    \"for\": true,\n    \"graphql\": true,\n    \"files\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ndocuments:\\n  - \\\"src/**/!(*.d).{ts,tsx}\\\"\\n  - \\\"src/**/*.graphql\\\"\\ngenerates:\\n  src/schema.tsx:\\n    plugins:\\n      - typescript\\n      - typescript-operations\\n      - typescript-react-apollo\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"16:30 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step6/App.tsx\\\" subtitle=\\\"Our current code\\\"\",\n    \"16:30\": true,\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": \"\\\"src/step6/App.tsx\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import React from 'react';\\nimport { DogToy, useGetToysUnderPriceQuery } from './schema';\\nimport { gql } from '@apollo/client';\\n\\nimport './App.css';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nconst CONTENTFUL_GRAPHQL_ENDPOINT = `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`;\\n\\n// `gql` is a template literal tag that parses GraphQL query strings into the standard GraphQL AST (abstract syntax tree).\\n// Allows Apollo to be smarter because it can traverse the query to perform validation and optimizations.\\ngql`\\n  query getToysUnderPrice ($maxPrice: Float) {\\n    dogToyCollection(where: {estimatedPrice_lt: $maxPrice}) {\\n      items {\\n        sys { id }\\n        toyName\\n        estimatedPrice\\n        toyPhoto { url }\\n      }\\n    }\\n  }\\n`\\n\\nconst App = () => {\\n  const { loading, error, data } = useGetToysUnderPriceQuery({\\n    variables: {\\n      maxPrice: 20\\n    }\\n  });\\n\\n  // Use optional chaining to retrieve the nested items array OR default to an empty array\\n  const allToys = (data?.dogToyCollection?.items || []) as DogToy[];\\n\\n  if (error) {\\n    console.error(error);\\n    return <div className=\\\"app\\\"><h1>Oops! Something went wrong</h1></div>\\n  } else if (loading) {\\n    return <div className=\\\"app\\\">\\n      <div className=\\\"loader\\\"/>\\n    </div>;\\n  }\\n\\n  return (\\n    <div className=\\\"app\\\">\\n      <div className=\\\"container\\\">\\n        <h1>Welcome! These are Cowboy's toys</h1>\\n        <ul className=\\\"productList\\\">\\n          {allToys.map((toy) =>\\n            <li key={toy.sys.id} id={toy.sys.id} className=\\\"productCard\\\">\\n              <h2>\\n                <span>{toy.toyName}</span>\\n                <span>${toy.estimatedPrice}</span>\\n              </h2>\\n              {toy.toyPhoto?.url && <img src={toy.toyPhoto.url} alt=\\\"\\\"/>}\\n            </li>,\\n          )}\\n        </ul>\\n      </div>\\n      <footer>\\n        <div className=\\\"container\\\">\\n          The GraphQL Schema for the above data can be explored within <a\\n          href={`${CONTENTFUL_GRAPHQL_ENDPOINT}/explore?access_token=${API_KEY}`}>GraphiQL</a>\\n        </div>\\n      </footer>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"16\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"16 showNumbers title=\\\"src/App.tsx\\\" file=\\\"src/step7/App.tsx\\\" subtitle=\\\"Move the query to a new file - getToysUnderPrice.graphql\\\"\",\n    \"showNumbers\": true,\n    \"title\": \"\\\"src/App.tsx\\\"\",\n    \"file\": true,\n    \"subtitle\": \"\\\"Move\",\n    \"the\": true,\n    \"query\": true,\n    \"to\": true,\n    \"a\": true,\n    \"new\": true,\n    \"-\": true,\n    \"getToysUnderPrice.graphql\\\"\": true\n  }), \"404: Not Found\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"What else can \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"codegen\"), \" do?\"), mdx(\"hr\", null));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"9f744310-a7f6-54bd-b312-597dcf8228b6","slug":"","title":"Auto-generating Typescript for your content model"}},"staticQueryHashes":[]}