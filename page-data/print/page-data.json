{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"9f744310-a7f6-54bd-b312-597dcf8228b6","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Auto-generating Typescript for your content model\"), mdx(\"h3\", null, \"A workshop by your friends at Clover\"), mdx(\"hr\", null), mdx(\"h1\", null, \"My name is Rachel\"), mdx(\"p\", null, \"Contact me with any questions on Twitter! \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/RachelWebDev\"\n  }), \"@RachelWebDev\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Today we'll learn about...\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"codegen\"), \" to generate TS definitions from your Contentful project\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to utilize TS in conjunction with Apollo\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"codegen\"), \" to improve IDE checking of graphQL\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Why should you use Typescript?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"~15% of all JavaScript bugs can be detected by TypeScript*\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Static checking from inside your IDE\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Easier to refactor code without breaking it\")), mdx(\"p\", null, \"*\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://earlbarr.com/publications/typestudy.pdf\"\n  }), \"Per 2017 study\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Install TypeScript\\\" subtitle=\\\"then rename js files & restart the app\\\"\",\n    \"title\": \"\\\"Install\",\n    \"TypeScript\\\"\": true,\n    \"subtitle\": \"\\\"then\",\n    \"rename\": true,\n    \"js\": true,\n    \"files\": true,\n    \"&\": true,\n    \"restart\": true,\n    \"the\": true,\n    \"app\\\"\": true\n  }), \"npm install --save-dev typescript @types/node @types/react @types/react-dom @types/jest\\n\\n# or\\n\\nyarn add -D typescript @types/node @types/react @types/react-dom @types/jest\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Connecting to Contentful\\\" subtitle=\\\"Add Contentful credentials to .env file\\\"\",\n    \"title\": \"\\\"Connecting\",\n    \"to\": true,\n    \"Contentful\\\"\": true,\n    \"subtitle\": \"\\\"Add\",\n    \"Contentful\": true,\n    \"credentials\": true,\n    \".env\": true,\n    \"file\\\"\": true\n  }), \"REACT_APP_CONTENTFUL_SPACE_ID=z1e74uympjtv\\nREACT_APP_CONTENTFUL_ENVIRONMENT=master\\nREACT_APP_CONTENTFUL_API_KEY=hOSyAyj25eyBNh3tRBScPJLu40SRSx-EgjWGTdtrA98\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"Making a graphQL request\\\" subtitle=\\\"result has the implicit type 'any'\\\"\",\n    \"title\": \"\\\"Making\",\n    \"a\": true,\n    \"graphQL\": true,\n    \"request\\\"\": true,\n    \"subtitle\": \"\\\"result\",\n    \"has\": true,\n    \"the\": true,\n    \"implicit\": true,\n    \"type\": true,\n    \"'any'\\\"\": true\n  }), \"// Utilize the environment variables defined in the `.env` file\\nconst SPACE_ID = process.env.REACT_APP_CONTENTFUL_SPACE_ID;\\nconst ENVIRONMENT = process.env.REACT_APP_CONTENTFUL_ENVIRONMENT;\\nconst API_KEY = process.env.REACT_APP_CONTENTFUL_API_KEY;\\n\\n// result is implicit type 'any'\\nconst result = await fetch(\\n  `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`,\\n  {\\n    method: 'POST',\\n    headers: { Authorization: `Bearer ${API_KEY}` },\\n    body: JSON.stringify({ query: 'dogToy (id: \\\"4ZmUXz3NbfISg0l7Bui7cu\\\") { toyName }' }),\\n  }\\n).then((res) => res.json());\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"Making a graphQL request\\\" subtitle=\\\"create a type to represent the response\\\"\",\n    \"title\": \"\\\"Making\",\n    \"a\": true,\n    \"graphQL\": true,\n    \"request\\\"\": true,\n    \"subtitle\": \"\\\"create\",\n    \"type\": true,\n    \"to\": true,\n    \"represent\": true,\n    \"the\": true,\n    \"response\\\"\": true\n  }), \"// Utilize the environment variables defined in the `.env` file\\nconst SPACE_ID = process.env.REACT_APP_CONTENTFUL_SPACE_ID;\\nconst ENVIRONMENT = process.env.REACT_APP_CONTENTFUL_ENVIRONMENT;\\nconst API_KEY = process.env.REACT_APP_CONTENTFUL_API_KEY;\\n\\ntype DogToy = { toyName: string };\\n\\nconst result: DogToy = await fetch(\\n  `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`,\\n  {\\n    method: 'POST',\\n    headers: { Authorization: `Bearer ${API_KEY}` },\\n    body: JSON.stringify({ query: 'dogToy (id: \\\"4ZmUXz3NbfISg0l7Bui7cu\\\") { toyName }' }),\\n  }\\n).then((res) => res.json());\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Install graphql-codegen\\\"\",\n    \"title\": \"\\\"Install\",\n    \"graphql-codegen\\\"\": true\n  }), \"npm install --save-dev @graphql-codegen/cli @graphql-codegen/typescript\\n\\n# or\\n\\nyarn add -D @graphql-codegen/cli @graphql-codegen/typescript\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"title=\\\"Create a codegen.yml file to configure codegen\\\"\",\n    \"title\": \"\\\"Create\",\n    \"a\": true,\n    \"codegen.yml\": true,\n    \"file\": true,\n    \"to\": true,\n    \"configure\": true,\n    \"codegen\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ngenerates:\\n  src/schema.ts:\\n    plugins:\\n      - typescript\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"title=\\\"Add a script to your package.json\\\"\",\n    \"title\": \"\\\"Add\",\n    \"a\": true,\n    \"script\": true,\n    \"to\": true,\n    \"your\": true,\n    \"package.json\\\"\": true\n  }), \"{\\n  \\\"scripts\\\": {\\n    \\\"gen\\\": \\\"graphql-codegen --config codegen.yml --require dotenv/config\\\"\\n  }\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Run the script to generate src/schema.ts\\\"\",\n    \"title\": \"\\\"Run\",\n    \"the\": true,\n    \"script\": true,\n    \"to\": true,\n    \"generate\": true,\n    \"src/schema.ts\\\"\": true\n  }), \"npm run gen\\n\\n# or\\n\\nyarn gen\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"src/schema.ts\\\"\",\n    \"title\": \"\\\"src/schema.ts\\\"\"\n  }), \"/**\\n * an assortment of toys for my new puppy [See type\\n * definition](https://app.contentful.com/spaces/z1e74uympjtv/content_types/dogToy)\\n */\\nexport type DogToy = Entry & {\\n  __typename?: 'DogToy';\\n  sys: Sys;\\n  linkedFrom?: Maybe<DogToyLinkingCollections>;\\n  toyName?: Maybe<Scalars['String']>;\\n  toyPhoto?: Maybe<Asset>;\\n  puppyPhoto?: Maybe<Asset>;\\n  estimatedPrice?: Maybe<Scalars['Float']>;\\n  linkToBuy?: Maybe<Scalars['String']>;\\n};\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Our current code\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"// ...\\n\\ntype DogToy = { toyName: string };\\n\\nconst result: DogToy = await fetch(\\n  `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`,\\n  {\\n    method: 'POST',\\n    headers: { Authorization: `Bearer ${API_KEY}` },\\n    body: JSON.stringify({ query: 'dogToy (id: \\\"4ZmUXz3NbfISg0l7Bui7cu\\\") { toyName }' }),\\n  }\\n).then((res) => res.json());\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Using the auto-generated DogToy type\\\"\",\n    \"subtitle\": \"\\\"Using\",\n    \"the\": true,\n    \"auto-generated\": true,\n    \"DogToy\": true,\n    \"type\\\"\": true\n  }), \"import { DogToy } from 'schema';\\n\\n// ...\\n\\nconst result: DogToy = await fetch(\\n  `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`,\\n  {\\n    method: 'POST',\\n    headers: { Authorization: `Bearer ${API_KEY}` },\\n    body: JSON.stringify({ query: 'dogToy (id: \\\"4ZmUXz3NbfISg0l7Bui7cu\\\") { toyName }' }),\\n  }\\n).then((res) => res.json());\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"More specific usage of the DogToy type\\\"\",\n    \"subtitle\": \"\\\"More\",\n    \"specific\": true,\n    \"usage\": true,\n    \"of\": true,\n    \"the\": true,\n    \"DogToy\": true,\n    \"type\\\"\": true\n  }), \"import { DogToy } from 'schema';\\n\\n// ...\\n\\ntype GetToysQuery = Pick<DogToy, 'toyName'>; // pick a set of properties from DogToy\\n\\nconst result: GetToysQuery = await fetch(\\n  `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`,\\n  {\\n    method: 'POST',\\n    headers: { Authorization: `Bearer ${API_KEY}` },\\n    body: JSON.stringify({ query: 'dogToy (id: \\\"4ZmUXz3NbfISg0l7Bui7cu\\\") { toyName }' }),\\n  }\\n).then((res) => res.json());\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Install typescript-operations plugin\\\"\",\n    \"title\": \"\\\"Install\",\n    \"typescript-operations\": true,\n    \"plugin\\\"\": true\n  }), \"npm install --save-dev @graphql-codegen/typescript-operations\\n\\n# or\\n\\nyarn add -D @graphql-codegen/typescript-operations\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"title=\\\"codegen.yml\\\" subtitle=\\\"Our current codegen config\\\"\",\n    \"title\": \"\\\"codegen.yml\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"codegen\": true,\n    \"config\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ngenerates:\\n  src/schema.ts:\\n    plugins:\\n      - typescript\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"title=\\\"codegen.yml\\\" subtitle=\\\"Adding a new plugin\\\"\",\n    \"title\": \"\\\"codegen.yml\\\"\",\n    \"subtitle\": \"\\\"Adding\",\n    \"a\": true,\n    \"new\": true,\n    \"plugin\\\"\": true\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n      headers:\\n        Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ndocuments: \\\"src/**/!(*.d).{ts,tsx}\\\"\\ngenerates:\\n  src/schema.ts:\\n    plugins:\\n      - typescript\\n      - typescript-operations\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Run the script to re-generate src/schema.ts\\\"\",\n    \"title\": \"\\\"Run\",\n    \"the\": true,\n    \"script\": true,\n    \"to\": true,\n    \"re-generate\": true,\n    \"src/schema.ts\\\"\": true\n  }), \"npm run gen\\n\\n# or\\n\\nyarn gen\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"src/schema.ts\\\"\",\n    \"title\": \"\\\"src/schema.ts\\\"\"\n  }), \"// ...\\n\\nexport type DogToy = Entry & {\\n  __typename?: 'DogToy';\\n  sys: Sys;\\n  linkedFrom?: Maybe<DogToyLinkingCollections>;\\n  toyName?: Maybe<Scalars['String']>;\\n  toyPhoto?: Maybe<Asset>;\\n  puppyPhoto?: Maybe<Asset>;\\n  estimatedPrice?: Maybe<Scalars['Float']>;\\n  linkToBuy?: Maybe<Scalars['String']>;\\n};\\n\\nexport type GetToysQuery = (\\n  { __typename?: 'Query' }\\n  & { dogToyCollection?: Maybe<(\\n    { __typename?: 'DogToyCollection' }\\n    & { items: Array<Maybe<(\\n      { __typename?: 'DogToy' }\\n      & Pick<DogToy, 'toyName'>\\n    )>> }\\n  )> }\\n);\\n\\n// ...\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Our current code\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import { DogToy } from 'schema';\\n\\n// ...\\n\\ntype GetToysQuery = Pick<DogToy, 'toyName'>; // pick a set of properties from DogToy\\n\\nconst result: GetToysQuery = await fetch(\\n  `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`,\\n  {\\n    method: 'POST',\\n    headers: { Authorization: `Bearer ${API_KEY}` },\\n    body: JSON.stringify({ query: 'dogToy (id: \\\"4ZmUXz3NbfISg0l7Bui7cu\\\") { toyName }' }),\\n  }\\n).then((res) => res.json());\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"using the auto-generated GetToysQuery type\\\"\",\n    \"subtitle\": \"\\\"using\",\n    \"the\": true,\n    \"auto-generated\": true,\n    \"GetToysQuery\": true,\n    \"type\\\"\": true\n  }), \"import { GetToysQuery } from 'schema';\\n\\n// ...\\n\\nconst result: GetToysQuery = await fetch(\\n  `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`,\\n  {\\n    method: 'POST',\\n    headers: { Authorization: `Bearer ${API_KEY}` },\\n    body: JSON.stringify({ query: 'dogToy (id: \\\"4ZmUXz3NbfISg0l7Bui7cu\\\") { toyName }' }),\\n  }\\n).then((res) => res.json());\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"What if you want to use Apollo Client in your React app?\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=\\\"index.tsx\\\" subtitle=\\\"Our current code\\\"\",\n    \"title\": \"\\\"index.tsx\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport App from './App';\\n\\nReactDOM.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>,\\n  document.getElementById('root')\\n);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=\\\"index.tsx\\\" subtitle=\\\"Add an ApolloProvider\\\"\",\n    \"title\": \"\\\"index.tsx\\\"\",\n    \"subtitle\": \"\\\"Add\",\n    \"an\": true,\n    \"ApolloProvider\\\"\": true\n  }), \"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport App from './App';\\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\\n\\n// Utilize the environment variables defined in the `.env` file\\nconst {\\n  REACT_APP_CONTENTFUL_SPACE_ID: SPACE_ID,\\n  REACT_APP_CONTENTFUL_ENVIRONMENT: ENVIRONMENT,\\n  REACT_APP_CONTENTFUL_API_KEY: API_KEY,\\n} = process.env;\\n\\nexport const apolloClient = new ApolloClient({\\n  uri: `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`,\\n  headers: {\\n    Authorization: `Bearer ${API_KEY}`,\\n  },\\n  cache: new InMemoryCache(),\\n});\\n\\nReactDOM.render(\\n  <React.StrictMode>\\n    <ApolloProvider client={apolloClient}>\\n      <App />\\n    </ApolloProvider>\\n  </React.StrictMode>,\\n  document.getElementById('root')\\n);\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Our current code\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import { GetToysQuery } from 'schema';\\n\\n// ...\\n\\nconst result: GetToysQuery = await fetch(\\n  `https://graphql.contentful.com/content/v1/spaces/${SPACE_ID}/environments/${ENVIRONMENT}`,\\n  {\\n    method: 'POST',\\n    headers: { Authorization: `Bearer ${API_KEY}` },\\n    body: JSON.stringify({ query: 'dogToy (id: \\\"4ZmUXz3NbfISg0l7Bui7cu\\\") { toyName }' }),\\n  }\\n).then((res) => res.json());\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Utilizing apollo client\\\"\",\n    \"subtitle\": \"\\\"Utilizing\",\n    \"apollo\": true,\n    \"client\\\"\": true\n  }), \"import { Unnamed_1_Query } from 'schema';\\n\\nimport { useQuery } from '@apollo/client';\\nimport { gql } from 'graphql.macro';\\n\\nconst GET_DOG_TOY = gql`\\n  query {\\n    dogToy(id: \\\"4ZmUXz3NbfISg0l7Bui7cu\\\") {\\n      toyName\\n    }\\n  }\\n`;\\n\\n// ...\\n\\nconst { loading, error, data } = useQuery<Unnamed_1_Query>(GET_DOG_TOY);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Need to give our query a name\\\"\",\n    \"subtitle\": \"\\\"Need\",\n    \"to\": true,\n    \"give\": true,\n    \"our\": true,\n    \"query\": true,\n    \"a\": true,\n    \"name\\\"\": true\n  }), \"import { GetGreenieToyQuery } from 'schema';\\n\\nimport { useQuery } from '@apollo/client';\\nimport { gql } from 'graphql.macro';\\n\\nconst GET_DOG_TOY = gql`\\n  query getGreenieToy {\\n    dogToy(id: \\\"4ZmUXz3NbfISg0l7Bui7cu\\\") {\\n      toyName\\n    }\\n  }\\n`;\\n\\n// ...\\n\\nconst { loading, error, data } = useQuery<GetGreenieToyQuery>(GET_DOG_TOY);\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"What if you want to store your graphQL queries in *.graphql files?\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\",\n    \"metastring\": \"title=\\\"getGreenieToy.graphql\\\"\",\n    \"title\": \"\\\"getGreenieToy.graphql\\\"\"\n  }), \"query getGreenieToy {\\n  dogToy(id: \\\"4ZmUXz3NbfISg0l7Bui7cu\\\") {\\n    toyName\\n  }\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"title=\\\"codegen.yml\\\"\",\n    \"title\": \"\\\"codegen.yml\\\"\"\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n    headers:\\n      Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ndocuments: \\\"src/**/!(*.d).{ts,tsx}\\\"\\ngenerates:\\n  src/schema.ts:\\n    plugins:\\n      - typescript\\n      - typescript-operations\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"title=\\\"codegen.yml\\\"\",\n    \"title\": \"\\\"codegen.yml\\\"\"\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n    headers:\\n      Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ndocuments:\\n  - \\\"src/**/!(*.d).{ts,tsx}\\\"\\n  - \\\"src/**/*.graphql\\\"\\ngenerates:\\n  src/schema.ts:\\n    plugins:\\n      - typescript\\n      - typescript-operations\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Run the script to generate src/schema.ts\\\"\",\n    \"title\": \"\\\"Run\",\n    \"the\": true,\n    \"script\": true,\n    \"to\": true,\n    \"generate\": true,\n    \"src/schema.ts\\\"\": true\n  }), \"npm run gen\\n\\n# or\\n\\nyarn gen\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Our current code\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import { GetGreenieToyQuery } from 'schema';\\n\\nimport { useQuery } from '@apollo/client';\\nimport { gql } from 'graphql.macro';\\n\\nconst GET_DOG_TOY = gql`\\n  query getGreenieToy {\\n    dogToy(id: \\\"4ZmUXz3NbfISg0l7Bui7cu\\\") {\\n      toyName\\n    }\\n  }\\n`;\\n\\n// ...\\n\\nconst { loading, error, data } = useQuery<GetGreenieToyQuery>(GET_DOG_TOY);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Import our graphQL file\\\"\",\n    \"subtitle\": \"\\\"Import\",\n    \"our\": true,\n    \"graphQL\": true,\n    \"file\\\"\": true\n  }), \"import { GetGreenieToyQuery } from 'schema';\\n\\nimport { useQuery } from '@apollo/client';\\nimport { loader } from 'graphql.macro';\\n\\nconst GET_DOG_TOY = loader('./getGreenieToy.graphql');\\n\\n// ...\\n\\nconst { loading, error, data } = useQuery<GetGreenieToyQuery>(GET_DOG_TOY);\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Install typescript-react-apollo plugin\\\"\",\n    \"title\": \"\\\"Install\",\n    \"typescript-react-apollo\": true,\n    \"plugin\\\"\": true\n  }), \"npm install --save-dev @graphql-codegen/typescript-react-apollo\\n\\n# or\\n\\nyarn add -D @graphql-codegen/typescript-react-apollo\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"title=\\\"codegen.yml\\\"\",\n    \"title\": \"\\\"codegen.yml\\\"\"\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n    headers:\\n      Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ndocuments:\\n  - \\\"src/**/!(*.d).{ts,tsx}\\\"\\n  - \\\"src/**/*.graphql\\\"\\ngenerates:\\n  src/schema.ts:\\n    plugins:\\n      - typescript\\n      - typescript-operations\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\",\n    \"metastring\": \"title=\\\"codegen.yml\\\"\",\n    \"title\": \"\\\"codegen.yml\\\"\"\n  }), \"overwrite: true\\nschema:\\n  - https://graphql.contentful.com/content/v1/spaces/${REACT_APP_CONTENTFUL_SPACE_ID}/environments/${REACT_APP_CONTENTFUL_ENVIRONMENT}:\\n    headers:\\n      Authorization: \\\"Bearer ${REACT_APP_CONTENTFUL_API_KEY}\\\"\\ndocuments:\\n  - \\\"src/**/!(*.d).{ts,tsx}\\\"\\n  - \\\"src/**/*.graphql\\\"\\ngenerates:\\n  src/schema.tsx:\\n    plugins:\\n      - typescript\\n      - typescript-operations\\n      - typescript-react-apollo\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"title=\\\"Run the script to generate src/schema.ts\\\"\",\n    \"title\": \"\\\"Run\",\n    \"the\": true,\n    \"script\": true,\n    \"to\": true,\n    \"generate\": true,\n    \"src/schema.ts\\\"\": true\n  }), \"npm run gen\\n\\n# or\\n\\nyarn gen\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"src/schema.tsx\\\" subtitle=\\\"useGetGreenieToyQuery was auto-created for us!\\\"\",\n    \"title\": \"\\\"src/schema.tsx\\\"\",\n    \"subtitle\": \"\\\"useGetGreenieToyQuery\",\n    \"was\": true,\n    \"auto-created\": true,\n    \"for\": true,\n    \"us!\\\"\": true\n  }), \"export function useGetGreenieToyQuery(baseOptions?: Apollo.QueryHookOptions<GetGreenieToyQuery, GetGreenieToyQueryVariables>) {\\n  return Apollo.useQuery<GetGreenieToyQuery, GetGreenieToyQueryVariables>(GetGreenieToyDocument, baseOptions);\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Our current code\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import { GetGreenieToyQuery } from 'schema';\\n\\nimport { useQuery } from '@apollo/client';\\nimport { loader } from 'graphql.macro';\\n\\nconst GET_DOG_TOY = loader('./getGreenieToy.graphql');\\n\\n// ...\\n\\nconst { loading, error, data } = useQuery<GetGreenieToyQuery>(GET_DOG_TOY);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Our current code\\\"\",\n    \"subtitle\": \"\\\"Our\",\n    \"current\": true,\n    \"code\\\"\": true\n  }), \"import { useGetGreenieToyQuery } from 'schema';\\n\\n// ...\\n\\nconst { loading, error, data } = useGetGreenieToyQuery();\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"What else can \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"codegen\"), \" do?\"), mdx(\"hr\", null));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"9f744310-a7f6-54bd-b312-597dcf8228b6","slug":"","title":"Auto-generating Typescript for your content model"}},"staticQueryHashes":[]}